2019-07-27 00:04:25,734 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-VFTL6TA with PID 23744 (C:\123\company\target\classes started by 高羽翯 in C:\123\company)
2019-07-27 00:04:25,753 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-27 00:04:25,754 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-27 00:04:49,127 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 24.781 seconds (JVM running for 33.539)
2019-07-27 00:05:30,571 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:05:30,693 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:05:30,846 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:05:30,853 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:05:30,854 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:05:30,859 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:05:31,107 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:05:46,182 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:05:46,185 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:05:46,194 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:05:46,195 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:05:46,197 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:05:46,200 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:05:46,203 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "Uber CEO和马云交好",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 23,
      "title" : "高考查分被马云占了先机",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 24,
      "title" : "看完这个，你还想做微商吗？",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:05:46,944 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:05:46,946 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 00:05:46,950 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:05:46,952 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:05:46,954 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:05:46,957 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:05:46,959 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 27,
      "title" : "阿里巴巴最为窘迫的四件事",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 28,
      "title" : "高管却离开了",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 30,
      "title" : "支付宝余额使用将受限",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 31,
      "title" : "国内垂直B2B电商平台TOP30",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 33,
      "title" : "谷歌要重新进入中国市场了吗？",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:05:47,840 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:05:47,842 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 15(Integer), 5(Integer)
2019-07-27 00:05:47,851 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-27 00:05:47,852 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:05:47,853 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:05:47,855 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:05:47,858 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 4,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 34,
      "title" : "今天",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 35,
      "title" : "庆十一商品促销11111",
      "content" : "222222",
      "writeDate" : 1562198400000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:05:49,076 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:05:49,077 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:05:49,081 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:05:49,083 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:05:49,083 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:05:49,085 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:05:49,087 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:05:54,751 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:05:54,753 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:05:54,758 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:05:54,760 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:05:54,761 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:05:54,763 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:05:54,766 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:09:52,465 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:09:52,487 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:09:52,512 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:09:52,515 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:09:52,517 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:09:52,519 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:09:52,525 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:09:59,052 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:09:59,054 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:09:59,061 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:09:59,063 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:09:59,066 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:09:59,072 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:09:59,078 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:17:39,001 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 00:17:39,026 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:17:39,028 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 00:17:39,028 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 00:17:39,032 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:17:39,032 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:17:39,045 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 00:17:39,055 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 00:17:39,146 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 00:17:44,515 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 00:17:44,508 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 00:17:44,493 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 00:17:44,543 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:17:44,543 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:17:44,581 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 00:17:44,581 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 00:17:44,576 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:17:44,591 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 00:19:49,501 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:19:49,506 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 35(Integer)
2019-07-27 00:19:49,510 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:19:53,612 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 00:19:53,614 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:19:53,622 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 00:19:53,640 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 00:19:53,642 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:19:53,637 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 00:19:53,650 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 00:19:53,650 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:19:53,666 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 00:19:56,880 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users WHERE userName=? 
2019-07-27 00:19:56,884 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: admin(String)
2019-07-27 00:19:56,890 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:20:01,476 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:20:01,477 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:20:01,482 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:20:01,484 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:20:01,486 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:20:01,488 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:20:01,490 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:20:03,342 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:20:03,344 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:20:03,347 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:21:39,933 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:21:39,937 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:21:39,940 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:21:39,942 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:21:39,943 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:21:39,946 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:21:39,948 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:21:41,507 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:21:41,510 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:21:41,514 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:22:53,901 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:22:53,904 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:22:53,908 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:22:53,909 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:22:53,912 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:22:53,914 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:22:53,917 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:22:55,909 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:22:55,911 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:22:55,915 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:28:09,308 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:28:09,310 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:28:09,315 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:28:09,319 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:28:09,320 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:28:09,322 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:28:09,325 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:28:11,049 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:28:11,050 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:28:11,064 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:28:13,446 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:28:13,448 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:28:13,451 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:28:13,453 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:28:13,455 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:28:13,457 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:28:13,458 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:28:15,070 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:28:15,071 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:28:15,073 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:28:52,987 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:28:52,989 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:28:52,993 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:28:52,994 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:28:52,996 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:28:52,998 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:28:53,000 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:28:54,823 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:28:54,823 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:28:54,826 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:28:56,639 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:28:56,640 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:28:56,644 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:28:56,645 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:28:56,647 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:28:56,649 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:28:56,651 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:28:58,321 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:28:58,323 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:28:58,340 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:30:59,349 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:30:59,351 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:30:59,354 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:30:59,356 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:30:59,357 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:30:59,358 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:30:59,364 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:31:01,320 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:31:01,321 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:31:01,325 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:31:47,914 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:31:47,916 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:31:47,920 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:31:47,922 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:31:47,923 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:31:47,925 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:31:47,928 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:31:49,398 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:31:49,400 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:31:49,403 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:31:51,339 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:31:51,348 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:31:51,352 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:31:51,354 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:31:51,355 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:31:51,357 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:31:51,360 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:31:53,319 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:31:53,331 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:31:53,337 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:32:33,915 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:32:33,917 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:32:33,921 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:32:33,922 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:32:33,925 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:32:33,926 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:32:33,928 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:32:35,320 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:32:35,352 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:32:35,355 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:32:37,527 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:32:37,529 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:32:37,531 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:32:37,533 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:32:37,535 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:32:37,537 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:32:37,541 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:32:38,789 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:32:38,791 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:32:38,793 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:32:45,856 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:32:45,972 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:32:46,026 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:32:47,004 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:32:47,047 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:32:47,052 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:32:47,056 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:32:52,834 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:32:52,836 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:32:52,839 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:32:52,840 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:32:52,841 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:32:52,843 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:32:52,845 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:38:09,153 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:38:09,155 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:38:09,163 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:38:09,164 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:38:09,165 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:38:09,168 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:38:09,170 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:38:10,859 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:38:10,861 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:38:10,864 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:38:12,758 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:38:12,760 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:38:12,763 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:38:12,764 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:38:12,765 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:38:12,767 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:38:12,768 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:39:22,457 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:39:22,459 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:39:22,462 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:39:22,463 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:39:22,464 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:39:22,467 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:39:22,469 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:39:23,922 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:39:23,924 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:39:23,927 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:39:26,041 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:39:26,042 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:39:26,045 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:39:26,047 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:39:26,048 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:39:26,050 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:39:26,051 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:40:52,168 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:40:52,169 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:40:52,176 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:40:52,176 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:40:52,177 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:40:52,179 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:40:52,180 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:40:54,361 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:40:54,362 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:40:54,364 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:40:57,217 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:40:57,219 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:40:57,222 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:40:57,224 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:40:57,225 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:40:57,227 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:40:57,230 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:40:59,004 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:40:59,008 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: null, null, null, 0(Long)
2019-07-27 00:40:59,012 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 0
2019-07-27 00:41:00,561 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:41:00,563 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: null, null, null, 0(Long)
2019-07-27 00:41:00,567 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 0
2019-07-27 00:41:01,250 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:41:01,251 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: null, null, null, 0(Long)
2019-07-27 00:41:01,253 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 0
2019-07-27 00:41:01,577 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:41:01,578 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: null, null, null, 0(Long)
2019-07-27 00:41:01,581 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 0
2019-07-27 00:41:01,854 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:41:01,856 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: null, null, null, 0(Long)
2019-07-27 00:41:01,857 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 0
2019-07-27 00:42:02,180 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:42:02,182 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:42:02,185 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:42:02,186 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:42:02,187 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:42:02,188 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:42:02,190 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:42:03,849 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:42:03,852 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: null, null, null, 0(Long)
2019-07-27 00:42:03,854 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 0
2019-07-27 00:42:04,555 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:42:04,556 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: null, null, null, 0(Long)
2019-07-27 00:42:04,558 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 0
2019-07-27 00:42:04,990 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:42:04,992 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: null, null, null, 0(Long)
2019-07-27 00:42:04,993 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 0
2019-07-27 00:42:05,228 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:42:05,231 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: null, null, null, 0(Long)
2019-07-27 00:42:05,236 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 0
2019-07-27 00:42:05,494 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:42:05,497 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: null, null, null, 0(Long)
2019-07-27 00:42:05,498 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 0
2019-07-27 00:42:23,004 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:42:23,005 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:42:23,009 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:42:23,010 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:42:23,011 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:42:23,013 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:42:23,015 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:42:24,144 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:42:24,153 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: null, null, null, 0(Long)
2019-07-27 00:42:24,155 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 0
2019-07-27 00:42:28,017 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:42:28,019 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:42:28,022 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:42:28,024 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:42:28,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:42:28,027 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:42:28,028 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:42:41,374 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 00:42:41,376 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:42:41,384 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:42:41,386 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 00:42:41,387 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:42:41,389 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:42:41,391 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 00:42:43,713 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 00:42:43,714 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 14(Integer)
2019-07-27 00:42:43,717 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:43:35,678 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:43:35,680 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:43:35,686 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:43:35,688 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:43:35,688 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:43:35,690 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:43:35,692 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "创建新项目",
      "content" : "新闻内容",
      "writeDate" : 1466726400000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:43:37,280 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:43:37,281 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-27 00:43:37,284 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:46:11,335 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:46:11,360 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚(String), 你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]
昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】(String), 2019-07-26 00:00:00.0(Timestamp), 1(Long)
2019-07-27 00:46:11,372 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:46:15,002 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:46:15,004 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:46:15,007 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:46:15,009 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:46:15,010 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:46:15,012 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:46:15,015 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "索尼位55降价送卡",
      "content" : "新闻内容3",
      "writeDate" : -30364761600000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:46:30,682 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:46:30,684 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 2(Integer)
2019-07-27 00:46:30,687 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:46:44,896 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:46:44,898 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: iG队员不听教练BP；iG前教练因此出走(String), 新闻内容3(String), 2019-07-26 00:00:00.0(Timestamp), 2(Long)
2019-07-27 00:46:44,903 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:46:49,748 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:46:49,749 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:46:49,752 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:46:49,754 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:46:49,754 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:46:49,756 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:46:49,758 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "iG队员不听教练BP；iG前教练因此出走",
      "content" : "新闻内容3",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:46:54,824 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:46:54,826 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 2(Integer)
2019-07-27 00:46:54,828 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:47:07,506 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:47:07,510 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: iG队员不听教练BP；iG前教练因此出走(String), 21日进行的iG对阵FPX，冠军vs不败巅峰对决最终依靠TheShy一手吸血鬼进场秒杀FPX后排结束！
iG让一追二打破FPX不败金身，看上去iG状态回归，LPL迎来大结局，可是TS的赛后采访确暴露出iG潜在的一个大问题：TheShy的吸血鬼是自己执意要选的！
当TheShy在赛后采访被问到决胜局为何会出其不意的选出一个与阵容不搭配的吸血鬼时，TheShy回答：“并不是教练让我选的，教练想让我选一个有控制的前排，但我个人认为选一个线上发育后期打团更好，于是我选了吸血鬼！”
这个回答直接让粉丝心态爆炸，因为众所周知iG战队不服从教练管教已经不是新闻，iG战队的上任教练金晶洙就曾多次提到队员不听管理，特别是上单TheShy、打野Ning和辅助Baolan，而S8全球总决赛的最后一场决胜局，TheShy就曾因为无视教练BP而被金晶洙换下，本来BO5的最后一局打算继续使用Duke上场，但iG经理苏小洛坚持使用TheShy上场并赋予他自主决定BP的权利。虽然iG战队后来顺利夺取了S8全球总决赛的冠军，但是“iG战队无视教练BP”的梗也广为流传，S9赛季上单TheShy和辅助Baolan依旧多次传出违抗教练意愿自主BP的传言，这或许是iG前教练转至DWG的主要原因！
这次iG虽然战胜FPX，但许多粉丝表示“兴奋不起来”，显然iG的BP问题本质已经到选手的职业素养问题，面对TheShy采访的回答，我作为IG的粉丝感到很痛心，前有Mata杰斯打野，今有TheShy强拿吸血鬼！诚然电子竞技成王败寇，可是无规矩不成方圆，一支队内纪律性不强的队伍注定是走不长久的！我相信更多iG粉丝愿意看到的是一支井然有序、团结一心的IG，而并非每到国际赛遇到强队就掉链子的iG战队！
你觉得选手自主BP你能够接受吗？(String), 2019-07-25 00:00:00.0(Timestamp), 2(Long)
2019-07-27 00:47:07,842 ERROR (BaseController.java:271)- 操作数据库出现异常:名称重复，外键关联
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
### The error may exist in com/zryx/company/mapper/NewsMapper.xml
### The error may involve com.zryx.company.mapper.NewsMapper.updNews-Inline
### The error occurred while setting parameters
### SQL: UPDATE news SET title=? ,content=? ,writeDate=?  WHERE newsId = ?
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
; Data truncation: Data too long for column 'content' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy65.updNews(Unknown Source)
	at com.zryx.company.service.impl.NewsServiceImpl.updNews(NewsServiceImpl.java:56)
	at com.zryx.company.controller.NewsController.updNews(NewsController.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy82.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 00:48:33,144 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:48:33,145 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 哪吒之魔童降世4.5⭐(String), 之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。
第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。
这也是我会写这么长影评的原因。
我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。(String), 2019-07-25 00:00:00.0(Timestamp), 2(Long)
2019-07-27 00:48:33,159 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:48:36,740 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:48:36,741 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:48:36,745 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:48:36,746 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:48:36,747 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:48:36,750 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:48:36,751 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:49:11,609 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:49:11,611 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 3(Integer)
2019-07-27 00:49:11,615 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:49:13,634 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:49:13,635 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:49:13,637 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:49:13,639 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:49:13,640 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:49:13,642 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:49:13,644 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "理光b5不到二千",
      "content" : "你好",
      "writeDate" : 1191456000000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:49:16,002 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:49:16,005 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 3(Integer)
2019-07-27 00:49:16,006 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:49:39,077 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:49:39,080 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 我不应该受到这样的侮辱和诋毁(String), 【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。(String), 2019-07-27 00:00:00.0(Timestamp), 3(Long)
2019-07-27 00:49:39,085 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:49:42,188 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:49:42,190 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:49:42,193 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:49:42,194 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:49:42,195 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:49:42,197 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:49:42,199 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:50:16,773 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:50:16,775 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:50:16,778 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:50:16,780 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:50:16,781 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:50:16,782 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:50:16,784 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "单反与镜头组合",
      "content" : null,
      "writeDate" : 1191369600000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:50:19,659 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:50:19,660 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer)
2019-07-27 00:50:19,663 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:50:31,513 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:50:31,515 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 一组真人版的迪士尼公主(String), 一组真人版的迪士尼公主
这个还原度我吹爆，每一个都美的像仙女一样啊！！(String), 2019-07-27 00:00:00.0(Timestamp), 5(Long)
2019-07-27 00:50:31,520 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:50:34,185 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:50:34,186 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:50:34,189 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:50:34,190 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:50:34,191 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:50:34,193 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:50:34,195 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:50:36,771 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:50:36,773 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 15(Integer)
2019-07-27 00:50:36,775 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:50:46,823 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:50:46,824 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:50:46,827 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:50:46,828 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:50:46,829 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:50:46,831 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:50:46,832 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "百度将开拓美国和欧盟市场",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:50:49,312 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:50:49,314 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 15(Integer)
2019-07-27 00:50:49,316 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:51:02,823 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:51:02,825 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: #魔道祖师##陈情令# ​​​​(String), 魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心](String), 2019-07-27 00:00:00.0(Timestamp), 15(Long)
2019-07-27 00:51:02,831 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:51:04,986 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:51:04,988 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:51:04,990 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:51:04,992 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:51:04,993 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:51:04,995 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:51:04,996 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:51:07,293 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:51:07,294 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:51:07,297 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:51:07,298 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:51:07,299 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:51:07,300 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:51:07,302 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "Uber CEO和马云交好",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 23,
      "title" : "高考查分被马云占了先机",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 24,
      "title" : "看完这个，你还想做微商吗？",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:51:32,628 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:51:32,629 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 00:51:32,632 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:51:50,162 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:51:50,166 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 海雕只爱满地跑还被猎物吓到(String), 韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！(String), 2018-07-27 00:00:00.0(Timestamp), 16(Long)
2019-07-27 00:51:50,171 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:51:52,432 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:51:52,433 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:51:52,438 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:51:52,439 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:51:52,440 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:51:52,442 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:51:52,443 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:51:54,977 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:51:54,985 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:51:54,989 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:51:54,991 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:51:54,992 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:51:54,993 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:51:54,995 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "高考查分被马云占了先机",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 24,
      "title" : "看完这个，你还想做微商吗？",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:51:57,121 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:51:57,122 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 23(Integer)
2019-07-27 00:51:57,124 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:52:30,920 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:52:30,922 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 香港国际机场多人围攻老人(String), 【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。(String), 2019-07-27 00:00:00.0(Timestamp), 23(Long)
2019-07-27 00:52:30,927 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:52:33,359 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:52:33,361 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:52:33,363 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:52:33,365 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:52:33,366 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:52:33,367 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:52:33,369 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:52:44,029 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:52:44,031 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:52:44,034 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:52:44,036 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:52:44,037 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:52:44,038 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:52:44,039 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "看完这个，你还想做微商吗？",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:52:48,799 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:52:48,801 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:52:48,804 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:52:48,805 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:52:48,806 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:52:48,808 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:52:48,809 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:52:51,369 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:52:51,371 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 3(Integer)
2019-07-27 00:52:51,374 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:52:54,641 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:52:54,642 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:52:54,645 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:52:54,647 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:52:54,648 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:52:54,649 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:52:54,651 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:52:55,756 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:52:55,803 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:52:55,809 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:52:55,811 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:52:55,830 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:52:55,832 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:52:55,835 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "看完这个，你还想做微商吗？",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:52:57,636 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:52:57,688 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 24(Integer)
2019-07-27 00:52:57,690 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:53:36,988 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:53:36,989 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 魔道祖师超话(String), 魔道祖师超话
也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）
转载老福特 ​​​​(String), 2019-07-27 00:00:00.0(Timestamp), 24(Long)
2019-07-27 00:53:36,994 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:53:38,514 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:53:38,516 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:53:38,518 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:53:38,520 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:53:38,521 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:53:38,522 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:53:38,524 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:53:40,313 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:53:40,314 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:53:40,317 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:53:40,318 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:53:40,319 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:53:40,321 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:53:40,322 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "魔道祖师超话",
      "content" : "魔道祖师超话\r\n也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）\r\n转载老福特 ​​​​",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:53:42,931 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:53:42,932 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 00:53:42,934 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:53:42,935 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:53:42,936 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:53:42,938 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:53:42,939 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 27,
      "title" : "阿里巴巴最为窘迫的四件事",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 28,
      "title" : "高管却离开了",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 30,
      "title" : "支付宝余额使用将受限",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 31,
      "title" : "国内垂直B2B电商平台TOP30",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 33,
      "title" : "谷歌要重新进入中国市场了吗？",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:53:44,718 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:53:44,719 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:53:44,722 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:53:44,723 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:53:44,724 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:53:44,725 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:53:44,726 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "魔道祖师超话",
      "content" : "魔道祖师超话\r\n也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）\r\n转载老福特 ​​​​",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:53:46,581 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:53:46,582 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 24(Integer)
2019-07-27 00:53:46,589 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:53:49,255 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:53:49,256 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:53:49,259 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:53:49,260 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:53:49,262 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:53:49,263 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:53:49,265 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:53:50,197 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:53:50,198 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:53:50,201 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:53:50,202 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:53:50,203 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:53:50,204 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:53:50,206 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "魔道祖师超话",
      "content" : "魔道祖师超话\r\n也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）\r\n转载老福特 ​​​​",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:53:51,808 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:53:51,810 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 25(Integer)
2019-07-27 00:53:51,812 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:53:59,360 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:53:59,362 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 农村电商只能成为空谈?(String), 不是的(String), 2016-07-02 00:00:00.0(Timestamp), 25(Long)
2019-07-27 00:53:59,369 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:54:00,973 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:54:00,974 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:54:00,977 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:54:00,978 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:54:00,979 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:54:00,981 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:00,982 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:54:02,272 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:54:02,274 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:54:02,275 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:54:02,276 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:54:02,277 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:54:02,278 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:02,279 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "魔道祖师超话",
      "content" : "魔道祖师超话\r\n也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）\r\n转载老福特 ​​​​",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : "不是的",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:54:04,235 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:54:04,237 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 26(Integer)
2019-07-27 00:54:04,239 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:10,330 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:54:10,332 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 上半年这些行业大爆炸(String), 是什么呢(String), 2016-07-02 00:00:00.0(Timestamp), 26(Long)
2019-07-27 00:54:10,339 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:54:11,780 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:54:11,781 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:54:11,784 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:54:11,785 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:54:11,786 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:54:11,788 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:11,789 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:54:12,932 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:54:12,934 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:54:12,936 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:54:12,937 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:54:12,938 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:54:12,940 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:12,941 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "魔道祖师超话",
      "content" : "魔道祖师超话\r\n也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）\r\n转载老福特 ​​​​",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : "不是的",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : "是什么呢",
      "writeDate" : 1467331200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:54:14,034 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:54:14,035 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 00:54:14,037 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:54:14,038 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:54:14,039 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:54:14,040 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:14,042 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 27,
      "title" : "阿里巴巴最为窘迫的四件事",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 28,
      "title" : "高管却离开了",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 30,
      "title" : "支付宝余额使用将受限",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 31,
      "title" : "国内垂直B2B电商平台TOP30",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 33,
      "title" : "谷歌要重新进入中国市场了吗？",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:54:16,286 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:54:16,288 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 27(Integer)
2019-07-27 00:54:16,289 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:25,704 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:54:25,705 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 阿里巴巴最为窘迫的四件事(String), 我不告诉你(String), 2016-07-02 00:00:00.0(Timestamp), 27(Long)
2019-07-27 00:54:25,712 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:54:27,155 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:54:27,156 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:54:27,158 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:54:27,161 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:54:27,161 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:54:27,164 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:27,165 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:54:28,605 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:54:28,607 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:54:28,609 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:54:28,610 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:54:28,611 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:54:28,612 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:28,614 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "魔道祖师超话",
      "content" : "魔道祖师超话\r\n也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）\r\n转载老福特 ​​​​",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : "不是的",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : "是什么呢",
      "writeDate" : 1467331200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:54:31,201 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:54:31,203 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 00:54:31,205 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:54:31,206 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:54:31,207 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:54:31,208 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:31,209 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 27,
      "title" : "阿里巴巴最为窘迫的四件事",
      "content" : "我不告诉你",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 28,
      "title" : "高管却离开了",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 30,
      "title" : "支付宝余额使用将受限",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 31,
      "title" : "国内垂直B2B电商平台TOP30",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 33,
      "title" : "谷歌要重新进入中国市场了吗？",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:54:34,124 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:54:34,126 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 28(Integer)
2019-07-27 00:54:34,128 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:48,389 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:54:48,390 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 高管却离开了(String), 去哪里了呢(String), 2016-07-02 00:00:00.0(Timestamp), 28(Long)
2019-07-27 00:54:48,399 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:54:50,016 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:54:50,018 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:54:50,021 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:54:50,022 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:54:50,024 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:54:50,025 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:50,027 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:54:51,054 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:54:51,055 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:54:51,057 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:54:51,058 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:54:51,059 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:54:51,060 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:51,061 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "魔道祖师超话",
      "content" : "魔道祖师超话\r\n也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）\r\n转载老福特 ​​​​",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : "不是的",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : "是什么呢",
      "writeDate" : 1467331200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:54:52,099 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:54:52,100 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 00:54:52,103 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:54:52,104 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:54:52,105 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:54:52,107 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:54:52,108 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 27,
      "title" : "阿里巴巴最为窘迫的四件事",
      "content" : "我不告诉你",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 28,
      "title" : "高管却离开了",
      "content" : "去哪里了呢",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 30,
      "title" : "支付宝余额使用将受限",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 31,
      "title" : "国内垂直B2B电商平台TOP30",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 33,
      "title" : "谷歌要重新进入中国市场了吗？",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:54:54,185 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:54:54,186 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 30(Integer)
2019-07-27 00:54:54,189 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:55:10,727 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:55:10,728 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 支付宝余额使用将受限(String), 反正都是用花呗(String), 2016-07-02 00:00:00.0(Timestamp), 30(Long)
2019-07-27 00:55:10,733 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:55:12,192 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:55:12,194 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:55:12,197 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:55:12,198 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:55:12,199 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:55:12,200 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:55:12,202 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:55:13,178 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:55:13,179 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:55:13,182 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:55:13,183 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:55:13,184 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:55:13,185 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:55:13,186 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "魔道祖师超话",
      "content" : "魔道祖师超话\r\n也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）\r\n转载老福特 ​​​​",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : "不是的",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : "是什么呢",
      "writeDate" : 1467331200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:55:14,013 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:55:14,015 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 00:55:14,016 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:55:14,018 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:55:14,019 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:55:14,021 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:55:14,022 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 27,
      "title" : "阿里巴巴最为窘迫的四件事",
      "content" : "我不告诉你",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 28,
      "title" : "高管却离开了",
      "content" : "去哪里了呢",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 30,
      "title" : "支付宝余额使用将受限",
      "content" : "反正都是用花呗",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 31,
      "title" : "国内垂直B2B电商平台TOP30",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 33,
      "title" : "谷歌要重新进入中国市场了吗？",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:55:16,588 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:55:16,589 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 31(Integer)
2019-07-27 00:55:16,592 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:55:25,959 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:55:25,961 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 国内垂直B2B电商平台TOP30(String), 你知道吗(String), 2016-07-02 00:00:00.0(Timestamp), 31(Long)
2019-07-27 00:55:25,964 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:55:27,317 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:55:27,318 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:55:27,321 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:55:27,322 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:55:27,324 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:55:27,327 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:55:27,328 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:55:28,911 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:55:28,912 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 00:55:28,914 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:55:28,916 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:55:28,916 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:55:28,918 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:55:28,919 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "魔道祖师超话",
      "content" : "魔道祖师超话\r\n也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）\r\n转载老福特 ​​​​",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : "不是的",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : "是什么呢",
      "writeDate" : 1467331200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:55:30,355 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:55:30,357 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 00:55:30,358 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:55:30,360 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:55:30,360 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:55:30,362 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:55:30,363 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 27,
      "title" : "阿里巴巴最为窘迫的四件事",
      "content" : "我不告诉你",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 28,
      "title" : "高管却离开了",
      "content" : "去哪里了呢",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 30,
      "title" : "支付宝余额使用将受限",
      "content" : "反正都是用花呗",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 31,
      "title" : "国内垂直B2B电商平台TOP30",
      "content" : "你知道吗",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 33,
      "title" : "谷歌要重新进入中国市场了吗？",
      "content" : null,
      "writeDate" : 1467417600000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:55:33,632 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 00:55:33,633 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 33(Integer)
2019-07-27 00:55:33,635 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:56:11,044 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE news SET title=? ,content=? ,writeDate=? WHERE newsId = ? 
2019-07-27 00:56:11,045 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 难道只有我一个人...(String), 是的，只有你一个人，必须只有你一个人(String), 2016-07-02 00:00:00.0(Timestamp), 33(Long)
2019-07-27 00:56:11,049 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 00:56:12,701 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 00:56:12,703 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:56:12,705 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:56:12,707 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 00:56:12,707 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:56:12,709 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:56:12,711 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 17
  }
}
2019-07-27 00:56:18,779 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 00:56:18,781 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:56:18,792 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:56:18,793 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 00:56:18,794 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:56:18,796 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:56:18,811 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 00:58:32,819 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 00:58:32,821 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:58:32,826 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:58:32,828 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 00:58:32,828 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:58:32,830 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:58:32,831 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 00:58:36,353 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 00:58:36,355 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:58:36,358 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:58:36,360 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 00:58:36,361 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:58:36,363 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:58:36,364 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 00:58:37,900 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId=? 
2019-07-27 00:58:37,902 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 00:58:37,907 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:58:37,910 DEBUG (MessageController.java:62)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 16,
    "title" : "今天有雷阵雨吗？",
    "content" : "今天到底有没有雷阵雨？？？",
    "writer" : "guest",
    "writeDate" : 1467244800000,
    "count" : 2
  }
}
2019-07-27 00:58:45,520 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 00:58:45,521 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:58:45,524 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:58:45,525 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 00:58:45,526 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:58:45,528 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:58:45,529 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 00:58:48,051 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId=? 
2019-07-27 00:58:48,053 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 00:58:48,057 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:58:48,059 DEBUG (MessageController.java:62)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 16,
    "title" : "今天有雷阵雨吗？",
    "content" : "今天到底有没有雷阵雨？？？",
    "writer" : "guest",
    "writeDate" : 1467244800000,
    "count" : 2
  }
}
2019-07-27 00:59:23,061 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 00:59:23,063 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:59:23,066 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:59:23,067 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 00:59:23,068 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:59:23,071 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:59:23,072 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 00:59:24,426 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId=? 
2019-07-27 00:59:24,427 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 00:59:24,429 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:59:24,431 DEBUG (MessageController.java:62)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 16,
    "title" : "今天有雷阵雨吗？",
    "content" : "今天到底有没有雷阵雨？？？",
    "writer" : "guest",
    "writeDate" : 1467244800000,
    "count" : 2
  }
}
2019-07-27 00:59:26,335 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 00:59:26,336 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:59:26,339 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:59:26,340 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 00:59:26,341 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:59:26,342 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:59:26,344 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 00:59:27,921 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId=? 
2019-07-27 00:59:27,922 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 00:59:27,924 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:59:27,925 DEBUG (MessageController.java:62)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 16,
    "title" : "今天有雷阵雨吗？",
    "content" : "今天到底有没有雷阵雨？？？",
    "writer" : "guest",
    "writeDate" : 1467244800000,
    "count" : 2
  }
}
2019-07-27 00:59:43,141 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 00:59:43,142 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:59:43,145 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:59:43,146 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 00:59:43,148 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:59:43,150 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:59:43,152 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 00:59:44,913 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId=? 
2019-07-27 00:59:44,914 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 00:59:44,916 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:59:44,918 DEBUG (MessageController.java:62)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 16,
    "title" : "今天有雷阵雨吗？",
    "content" : "今天到底有没有雷阵雨？？？",
    "writer" : "guest",
    "writeDate" : 1467244800000,
    "count" : 2
  }
}
2019-07-27 00:59:47,681 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 00:59:47,682 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 00:59:47,684 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 00:59:47,685 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 00:59:47,686 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 00:59:47,688 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:59:47,690 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 00:59:49,292 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId=? 
2019-07-27 00:59:49,293 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 00:59:49,295 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 00:59:49,296 DEBUG (MessageController.java:62)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 16,
    "title" : "今天有雷阵雨吗？",
    "content" : "今天到底有没有雷阵雨？？？",
    "writer" : "guest",
    "writeDate" : 1467244800000,
    "count" : 2
  }
}
2019-07-27 00:59:49,298 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-27 00:59:49,299 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 00:59:49,317 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 00:59:49,319 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 18,
    "messageId" : 16,
    "content" : "今天没有雨，今天有冰雹。",
    "writer" : "user1",
    "writeDate" : 1467244800000
  }, {
    "revertId" : 40,
    "messageId" : 16,
    "content" : "11",
    "writer" : "11",
    "writeDate" : 1467331200000
  }, {
    "revertId" : 41,
    "messageId" : 16,
    "content" : "2222",
    "writer" : "aq",
    "writeDate" : 1562169600000
  } ]
}
2019-07-27 01:01:22,783 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 01:01:22,784 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 01:01:22,789 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:01:22,791 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 01:01:22,791 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:01:22,793 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:01:22,795 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 01:01:24,850 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId=? 
2019-07-27 01:01:24,852 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 01:01:24,854 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:01:24,856 DEBUG (MessageController.java:62)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 16,
    "title" : "今天有雷阵雨吗？",
    "content" : "今天到底有没有雷阵雨？？？",
    "writer" : "guest",
    "writeDate" : 1467244800000,
    "count" : 2
  }
}
2019-07-27 01:01:24,860 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-27 01:01:24,862 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 01:01:24,874 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 01:01:24,876 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 18,
    "messageId" : 16,
    "content" : "今天没有雨，今天有冰雹。",
    "writer" : "user1",
    "writeDate" : 1467244800000
  }, {
    "revertId" : 40,
    "messageId" : 16,
    "content" : "11",
    "writer" : "11",
    "writeDate" : 1467331200000
  }, {
    "revertId" : 41,
    "messageId" : 16,
    "content" : "2222",
    "writer" : "aq",
    "writeDate" : 1562169600000
  } ]
}
2019-07-27 01:01:27,028 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 01:01:27,030 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 01:01:27,033 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:01:27,037 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 01:01:27,038 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:01:27,040 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:01:27,041 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 01:01:31,720 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 01:01:31,722 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 01:01:31,726 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:01:31,727 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 01:01:31,728 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:01:31,730 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:01:31,731 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 22,
      "title" : "谷歌浏览器支持富文本，IE不支持！",
      "content" : "<p>\r\n\t<span style=\"font-size:16px;\">IE不支持富文本格式，谷歌浏览器支持富文本。</span></p>\r\n",
      "writer" : "erick",
      "writeDate" : 1467244800000,
      "count" : 4
    }, {
      "messageId" : 23,
      "title" : "清华同方显示器的报价，型号AW1920TS",
      "content" : "<p>\r\n\twww.baidu.com</p>\r\n<p>\r\n\t<img alt=\"devil\" height=\"20\" src=\"http://localhost:8080/company/ckeditor/plugins/smiley/images/devil_smile.gif\" title=\"devil\" width=\"20\" /></p>\r\n",
      "writer" : "bimy",
      "writeDate" : 1467244800000,
      "count" : 3
    }, {
      "messageId" : 24,
      "title" : "明天有雨吗？",
      "content" : "<p>\r\n\t天气预报说有雨，你们说会下吗</p>\r\n",
      "writer" : "郭燕",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 25,
      "title" : "苹果手机壳哪有卖的？",
      "content" : "",
      "writer" : "uidn",
      "writeDate" : 1467244800000,
      "count" : 0
    }, {
      "messageId" : 26,
      "title" : "今天下雪吗？",
      "content" : "<p>\r\n\t下雪？</p>\r\n",
      "writer" : "刘新乐",
      "writeDate" : 1467331200000,
      "count" : 3
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 01:01:32,241 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 01:01:32,242 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 01:01:32,244 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 01:01:32,245 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 01:01:32,247 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:01:32,248 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:01:32,250 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 27,
      "title" : "今天谁带U盘了？",
      "content" : "<p>\r\n\t借我用一下。谢谢！</p>\r\n",
      "writer" : "刘新乐",
      "writeDate" : 1467417600000,
      "count" : 1
    }, {
      "messageId" : 29,
      "title" : "庆十一商品促销",
      "content" : "买买买",
      "writer" : "大妈",
      "writeDate" : 1564012800000,
      "count" : 0
    }, {
      "messageId" : 30,
      "title" : "庆十一商品促销",
      "content" : "买买买",
      "writer" : "大妈",
      "writeDate" : 1564012800000,
      "count" : 0
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 01:01:37,650 ERROR (BaseController.java:285)- 系统异常:com.zryx.company.model.User cannot be cast to java.util.List
java.lang.ClassCastException: com.zryx.company.model.User cannot be cast to java.util.List
	at com.zryx.company.controller.ChatController.initChat(ChatController.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-27 01:01:38,655 ERROR (BaseController.java:285)- 系统异常:com.zryx.company.model.User cannot be cast to java.util.List
java.lang.ClassCastException: com.zryx.company.model.User cannot be cast to java.util.List
	at com.zryx.company.controller.ChatController.initChat(ChatController.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-27 01:01:39,659 ERROR (BaseController.java:285)- 系统异常:com.zryx.company.model.User cannot be cast to java.util.List
java.lang.ClassCastException: com.zryx.company.model.User cannot be cast to java.util.List
	at com.zryx.company.controller.ChatController.initChat(ChatController.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-27 01:01:40,675 ERROR (BaseController.java:285)- 系统异常:com.zryx.company.model.User cannot be cast to java.util.List
java.lang.ClassCastException: com.zryx.company.model.User cannot be cast to java.util.List
	at com.zryx.company.controller.ChatController.initChat(ChatController.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-27 01:01:41,138 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 01:01:41,211 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 01:01:41,214 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:01:41,215 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 01:01:41,226 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:01:41,227 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:01:41,229 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 01:02:22,886 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 01:02:22,888 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 01:02:22,896 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:02:22,898 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 01:02:22,899 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:02:22,903 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:02:22,905 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 01:02:27,386 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 01:02:27,388 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 01:02:27,391 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:02:27,393 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 01:02:27,394 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:02:27,395 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:02:27,397 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 01:02:29,209 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 01:02:29,210 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 14(Integer)
2019-07-27 01:02:29,212 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:05:29,707 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 01:05:29,736 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 01:05:29,743 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:05:29,746 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 01:05:29,747 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:05:29,749 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:05:29,755 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 01:05:33,368 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 01:05:33,370 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 01:05:33,372 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:05:33,375 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 01:05:33,376 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:05:33,377 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:05:33,379 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 01:05:35,707 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 01:05:35,709 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 14(Integer)
2019-07-27 01:05:35,720 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:05:43,383 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 01:05:43,385 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 01:05:43,388 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:05:43,390 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 01:05:43,392 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:05:43,394 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:05:43,396 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 01:08:04,358 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 01:08:04,382 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 01:08:04,392 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:08:04,393 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 01:08:04,394 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:08:04,396 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:08:04,399 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 01:08:07,512 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId=? 
2019-07-27 01:08:07,513 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 01:08:07,515 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:08:07,521 DEBUG (MessageController.java:62)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 16,
    "title" : "今天有雷阵雨吗？",
    "content" : "今天到底有没有雷阵雨？？？",
    "writer" : "guest",
    "writeDate" : 1467244800000,
    "count" : 2
  }
}
2019-07-27 01:08:07,522 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-27 01:08:07,524 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 01:08:07,531 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 01:08:07,534 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 18,
    "messageId" : 16,
    "content" : "今天没有雨，今天有冰雹。",
    "writer" : "user1",
    "writeDate" : 1467244800000
  }, {
    "revertId" : 40,
    "messageId" : 16,
    "content" : "11",
    "writer" : "11",
    "writeDate" : 1467331200000
  }, {
    "revertId" : 41,
    "messageId" : 16,
    "content" : "2222",
    "writer" : "aq",
    "writeDate" : 1562169600000
  } ]
}
2019-07-27 01:08:11,883 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 01:08:11,884 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 01:08:11,887 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:08:11,889 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 01:08:11,889 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:08:11,891 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:08:11,892 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 01:08:13,952 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 01:08:13,953 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 01:08:13,956 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:08:13,957 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 01:08:13,958 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:08:13,960 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:08:13,961 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 22,
      "title" : "谷歌浏览器支持富文本，IE不支持！",
      "content" : "<p>\r\n\t<span style=\"font-size:16px;\">IE不支持富文本格式，谷歌浏览器支持富文本。</span></p>\r\n",
      "writer" : "erick",
      "writeDate" : 1467244800000,
      "count" : 4
    }, {
      "messageId" : 23,
      "title" : "清华同方显示器的报价，型号AW1920TS",
      "content" : "<p>\r\n\twww.baidu.com</p>\r\n<p>\r\n\t<img alt=\"devil\" height=\"20\" src=\"http://localhost:8080/company/ckeditor/plugins/smiley/images/devil_smile.gif\" title=\"devil\" width=\"20\" /></p>\r\n",
      "writer" : "bimy",
      "writeDate" : 1467244800000,
      "count" : 3
    }, {
      "messageId" : 24,
      "title" : "明天有雨吗？",
      "content" : "<p>\r\n\t天气预报说有雨，你们说会下吗</p>\r\n",
      "writer" : "郭燕",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 25,
      "title" : "苹果手机壳哪有卖的？",
      "content" : "",
      "writer" : "uidn",
      "writeDate" : 1467244800000,
      "count" : 0
    }, {
      "messageId" : 26,
      "title" : "今天下雪吗？",
      "content" : "<p>\r\n\t下雪？</p>\r\n",
      "writer" : "刘新乐",
      "writeDate" : 1467331200000,
      "count" : 3
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 01:08:14,456 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 01:08:14,458 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 01:08:14,460 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 01:08:14,461 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 01:08:14,461 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:08:14,463 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:08:14,464 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 27,
      "title" : "今天谁带U盘了？",
      "content" : "<p>\r\n\t借我用一下。谢谢！</p>\r\n",
      "writer" : "刘新乐",
      "writeDate" : 1467417600000,
      "count" : 1
    }, {
      "messageId" : 29,
      "title" : "庆十一商品促销",
      "content" : "买买买",
      "writer" : "大妈",
      "writeDate" : 1564012800000,
      "count" : 0
    }, {
      "messageId" : 30,
      "title" : "庆十一商品促销",
      "content" : "买买买",
      "writer" : "大妈",
      "writeDate" : 1564012800000,
      "count" : 0
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 01:08:18,398 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM message WHERE messageId = ? 
2019-07-27 01:08:18,401 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 30(Integer)
2019-07-27 01:08:18,406 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 01:08:18,417 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 01:08:18,418 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 01:08:18,420 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:08:18,423 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 01:08:18,424 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:08:18,426 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:08:18,429 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 01:08:20,392 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 01:08:20,394 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 01:08:20,396 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:08:20,397 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 01:08:20,398 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:08:20,400 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:08:20,402 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 22,
      "title" : "谷歌浏览器支持富文本，IE不支持！",
      "content" : "<p>\r\n\t<span style=\"font-size:16px;\">IE不支持富文本格式，谷歌浏览器支持富文本。</span></p>\r\n",
      "writer" : "erick",
      "writeDate" : 1467244800000,
      "count" : 4
    }, {
      "messageId" : 23,
      "title" : "清华同方显示器的报价，型号AW1920TS",
      "content" : "<p>\r\n\twww.baidu.com</p>\r\n<p>\r\n\t<img alt=\"devil\" height=\"20\" src=\"http://localhost:8080/company/ckeditor/plugins/smiley/images/devil_smile.gif\" title=\"devil\" width=\"20\" /></p>\r\n",
      "writer" : "bimy",
      "writeDate" : 1467244800000,
      "count" : 3
    }, {
      "messageId" : 24,
      "title" : "明天有雨吗？",
      "content" : "<p>\r\n\t天气预报说有雨，你们说会下吗</p>\r\n",
      "writer" : "郭燕",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 25,
      "title" : "苹果手机壳哪有卖的？",
      "content" : "",
      "writer" : "uidn",
      "writeDate" : 1467244800000,
      "count" : 0
    }, {
      "messageId" : 26,
      "title" : "今天下雪吗？",
      "content" : "<p>\r\n\t下雪？</p>\r\n",
      "writer" : "刘新乐",
      "writeDate" : 1467331200000,
      "count" : 3
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 01:08:20,890 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 01:08:20,891 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 01:08:20,893 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-27 01:08:20,894 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 01:08:20,894 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:08:20,896 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:08:20,897 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 27,
      "title" : "今天谁带U盘了？",
      "content" : "<p>\r\n\t借我用一下。谢谢！</p>\r\n",
      "writer" : "刘新乐",
      "writeDate" : 1467417600000,
      "count" : 1
    }, {
      "messageId" : 29,
      "title" : "庆十一商品促销",
      "content" : "买买买",
      "writer" : "大妈",
      "writeDate" : 1564012800000,
      "count" : 0
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 01:08:27,048 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 01:08:27,049 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 01:08:27,058 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 01:08:27,059 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 01:08:27,060 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:08:27,061 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:08:27,064 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 01:08:31,477 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users 
2019-07-27 01:08:31,482 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:08:31,489 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 14
2019-07-27 01:08:31,495 DEBUG (UserController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "userId" : 2,
    "userName" : "user2",
    "password" : "222222",
    "status" : 1
  }, {
    "userId" : 9,
    "userName" : "user9",
    "password" : "999999",
    "status" : 1
  }, {
    "userId" : 10,
    "userName" : "user1010",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 12,
    "userName" : "user11",
    "password" : "111111",
    "status" : 0
  }, {
    "userId" : 13,
    "userName" : "user123",
    "password" : "222222",
    "status" : 0
  }, {
    "userId" : 18,
    "userName" : "user167",
    "password" : "666666",
    "status" : 0
  }, {
    "userId" : 19,
    "userName" : "user19",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 20,
    "userName" : "user20",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 22,
    "userName" : "guoyan",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 23,
    "userName" : "liuxinle",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 24,
    "userName" : "maqiuyue",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 29,
    "userName" : "admin",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 37,
    "userName" : "张三",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 41,
    "userName" : "王五愣2",
    "password" : "123456",
    "status" : 0
  } ]
}
2019-07-27 01:08:35,735 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users 
2019-07-27 01:08:35,736 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:08:35,742 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 14
2019-07-27 01:08:35,748 DEBUG (UserController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "userId" : 2,
    "userName" : "user2",
    "password" : "222222",
    "status" : 1
  }, {
    "userId" : 9,
    "userName" : "user9",
    "password" : "999999",
    "status" : 1
  }, {
    "userId" : 10,
    "userName" : "user1010",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 12,
    "userName" : "user11",
    "password" : "111111",
    "status" : 0
  }, {
    "userId" : 13,
    "userName" : "user123",
    "password" : "222222",
    "status" : 0
  }, {
    "userId" : 18,
    "userName" : "user167",
    "password" : "666666",
    "status" : 0
  }, {
    "userId" : 19,
    "userName" : "user19",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 20,
    "userName" : "user20",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 22,
    "userName" : "guoyan",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 23,
    "userName" : "liuxinle",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 24,
    "userName" : "maqiuyue",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 29,
    "userName" : "admin",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 37,
    "userName" : "张三",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 41,
    "userName" : "王五愣2",
    "password" : "123456",
    "status" : 0
  } ]
}
2019-07-27 01:08:54,466 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO users VALUES(NULL,? ,? ,?,?) 
2019-07-27 01:08:54,476 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 张三三(String), 233(String), 0(Integer), 0(Integer)
2019-07-27 01:08:54,501 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLException: Column count doesn't match value count at row 1
### The error may exist in com/zryx/company/mapper/UserMapper.xml
### The error may involve com.zryx.company.mapper.UserMapper.addUser-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO users VALUES(NULL,? ,? ,?,?)
### Cause: java.sql.SQLException: Column count doesn't match value count at row 1
; bad SQL grammar []; nested exception is java.sql.SQLException: Column count doesn't match value count at row 1
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLException: Column count doesn't match value count at row 1
### The error may exist in com/zryx/company/mapper/UserMapper.xml
### The error may involve com.zryx.company.mapper.UserMapper.addUser-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO users VALUES(NULL,? ,? ,?,?)
### Cause: java.sql.SQLException: Column count doesn't match value count at row 1
; bad SQL grammar []; nested exception is java.sql.SQLException: Column count doesn't match value count at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy69.addUser(Unknown Source)
	at com.zryx.company.service.impl.UserServiceImpl.addUser(UserServiceImpl.java:102)
	at com.zryx.company.controller.UserController.addUser(UserController.java:51)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLException: Column count doesn't match value count at row 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy82.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 01:08:57,955 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users 
2019-07-27 01:08:57,957 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:08:57,959 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 14
2019-07-27 01:08:57,960 DEBUG (UserController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "userId" : 2,
    "userName" : "user2",
    "password" : "222222",
    "status" : 1
  }, {
    "userId" : 9,
    "userName" : "user9",
    "password" : "999999",
    "status" : 1
  }, {
    "userId" : 10,
    "userName" : "user1010",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 12,
    "userName" : "user11",
    "password" : "111111",
    "status" : 0
  }, {
    "userId" : 13,
    "userName" : "user123",
    "password" : "222222",
    "status" : 0
  }, {
    "userId" : 18,
    "userName" : "user167",
    "password" : "666666",
    "status" : 0
  }, {
    "userId" : 19,
    "userName" : "user19",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 20,
    "userName" : "user20",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 22,
    "userName" : "guoyan",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 23,
    "userName" : "liuxinle",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 24,
    "userName" : "maqiuyue",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 29,
    "userName" : "admin",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 37,
    "userName" : "张三",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 41,
    "userName" : "王五愣2",
    "password" : "123456",
    "status" : 0
  } ]
}
2019-07-27 01:09:09,365 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users WHERE userId=? 
2019-07-27 01:09:09,366 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 41(Integer)
2019-07-27 01:09:09,368 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 01:09:22,422 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users 
2019-07-27 01:09:22,423 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:09:22,425 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 14
2019-07-27 01:09:22,427 DEBUG (UserController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "userId" : 2,
    "userName" : "user2",
    "password" : "222222",
    "status" : 1
  }, {
    "userId" : 9,
    "userName" : "user9",
    "password" : "999999",
    "status" : 1
  }, {
    "userId" : 10,
    "userName" : "user1010",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 12,
    "userName" : "user11",
    "password" : "111111",
    "status" : 0
  }, {
    "userId" : 13,
    "userName" : "user123",
    "password" : "222222",
    "status" : 0
  }, {
    "userId" : 18,
    "userName" : "user167",
    "password" : "666666",
    "status" : 0
  }, {
    "userId" : 19,
    "userName" : "user19",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 20,
    "userName" : "user20",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 22,
    "userName" : "guoyan",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 23,
    "userName" : "liuxinle",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 24,
    "userName" : "maqiuyue",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 29,
    "userName" : "admin",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 37,
    "userName" : "张三",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 41,
    "userName" : "王五愣2",
    "password" : "123456",
    "status" : 0
  } ]
}
2019-07-27 01:09:38,239 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO users VALUES(NULL,? ,? ,?,?) 
2019-07-27 01:09:38,240 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: zss(String), zss(String), 0(Integer), 0(Integer)
2019-07-27 01:09:38,243 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLException: Column count doesn't match value count at row 1
### The error may exist in com/zryx/company/mapper/UserMapper.xml
### The error may involve com.zryx.company.mapper.UserMapper.addUser-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO users VALUES(NULL,? ,? ,?,?)
### Cause: java.sql.SQLException: Column count doesn't match value count at row 1
; bad SQL grammar []; nested exception is java.sql.SQLException: Column count doesn't match value count at row 1
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLException: Column count doesn't match value count at row 1
### The error may exist in com/zryx/company/mapper/UserMapper.xml
### The error may involve com.zryx.company.mapper.UserMapper.addUser-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO users VALUES(NULL,? ,? ,?,?)
### Cause: java.sql.SQLException: Column count doesn't match value count at row 1
; bad SQL grammar []; nested exception is java.sql.SQLException: Column count doesn't match value count at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy69.addUser(Unknown Source)
	at com.zryx.company.service.impl.UserServiceImpl.addUser(UserServiceImpl.java:102)
	at com.zryx.company.controller.UserController.addUser(UserController.java:51)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLException: Column count doesn't match value count at row 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy82.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 01:09:51,168 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users 
2019-07-27 01:09:51,169 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 01:09:51,172 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 14
2019-07-27 01:09:51,173 DEBUG (UserController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "userId" : 2,
    "userName" : "user2",
    "password" : "222222",
    "status" : 1
  }, {
    "userId" : 9,
    "userName" : "user9",
    "password" : "999999",
    "status" : 1
  }, {
    "userId" : 10,
    "userName" : "user1010",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 12,
    "userName" : "user11",
    "password" : "111111",
    "status" : 0
  }, {
    "userId" : 13,
    "userName" : "user123",
    "password" : "222222",
    "status" : 0
  }, {
    "userId" : 18,
    "userName" : "user167",
    "password" : "666666",
    "status" : 0
  }, {
    "userId" : 19,
    "userName" : "user19",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 20,
    "userName" : "user20",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 22,
    "userName" : "guoyan",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 23,
    "userName" : "liuxinle",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 24,
    "userName" : "maqiuyue",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 29,
    "userName" : "admin",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 37,
    "userName" : "张三",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 41,
    "userName" : "王五愣2",
    "password" : "123456",
    "status" : 0
  } ]
}
2019-07-27 01:10:49,306 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO users VALUES(NULL,? ,? ,?,?) 
2019-07-27 01:10:49,329 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: zss(String), zss(String), 0(Integer), 0(Integer)
2019-07-27 01:10:49,332 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLException: Column count doesn't match value count at row 1
### The error may exist in com/zryx/company/mapper/UserMapper.xml
### The error may involve com.zryx.company.mapper.UserMapper.addUser-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO users VALUES(NULL,? ,? ,?,?)
### Cause: java.sql.SQLException: Column count doesn't match value count at row 1
; bad SQL grammar []; nested exception is java.sql.SQLException: Column count doesn't match value count at row 1
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLException: Column count doesn't match value count at row 1
### The error may exist in com/zryx/company/mapper/UserMapper.xml
### The error may involve com.zryx.company.mapper.UserMapper.addUser-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO users VALUES(NULL,? ,? ,?,?)
### Cause: java.sql.SQLException: Column count doesn't match value count at row 1
; bad SQL grammar []; nested exception is java.sql.SQLException: Column count doesn't match value count at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy69.addUser(Unknown Source)
	at com.zryx.company.service.impl.UserServiceImpl.addUser(UserServiceImpl.java:102)
	at com.zryx.company.controller.UserController.addUser(UserController.java:51)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLException: Column count doesn't match value count at row 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy82.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 01:10:50,783 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO users VALUES(NULL,? ,? ,?,?) 
2019-07-27 01:10:50,785 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: zss(String), zss(String), 0(Integer), 0(Integer)
2019-07-27 01:10:50,788 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLException: Column count doesn't match value count at row 1
### The error may exist in com/zryx/company/mapper/UserMapper.xml
### The error may involve com.zryx.company.mapper.UserMapper.addUser-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO users VALUES(NULL,? ,? ,?,?)
### Cause: java.sql.SQLException: Column count doesn't match value count at row 1
; bad SQL grammar []; nested exception is java.sql.SQLException: Column count doesn't match value count at row 1
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLException: Column count doesn't match value count at row 1
### The error may exist in com/zryx/company/mapper/UserMapper.xml
### The error may involve com.zryx.company.mapper.UserMapper.addUser-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO users VALUES(NULL,? ,? ,?,?)
### Cause: java.sql.SQLException: Column count doesn't match value count at row 1
; bad SQL grammar []; nested exception is java.sql.SQLException: Column count doesn't match value count at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy69.addUser(Unknown Source)
	at com.zryx.company.service.impl.UserServiceImpl.addUser(UserServiceImpl.java:102)
	at com.zryx.company.controller.UserController.addUser(UserController.java:51)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLException: Column count doesn't match value count at row 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy82.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 08:45:21,308 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-VFTL6TA with PID 19452 (C:\123\company1.3\company\target\classes started by 高羽翯 in C:\123\company1.3\company)
2019-07-27 08:45:21,316 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-27 08:45:21,318 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-27 08:45:43,308 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 23.389 seconds (JVM running for 27.149)
2019-07-27 08:46:00,295 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users WHERE userName=? 
2019-07-27 08:46:00,372 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: admin(String)
2019-07-27 08:46:00,573 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 08:59:30,907 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users WHERE userName=? 
2019-07-27 08:59:30,957 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: admin(String)
2019-07-27 08:59:30,978 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 08:59:38,917 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 08:59:38,921 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 08:59:38,937 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 08:59:38,938 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 08:59:38,940 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 08:59:38,950 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 08:59:39,002 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:02:35,252 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 09:02:35,254 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 3(Integer)
2019-07-27 09:02:35,261 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:02:41,164 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:02:41,168 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:02:41,171 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:02:41,191 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:02:41,186 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 09:02:41,195 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:02:41,175 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:02:41,211 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:02:41,213 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:02:43,231 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:02:43,233 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:02:43,245 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:02:43,247 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:02:43,248 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:02:43,251 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:02:43,254 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:02:49,515 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:02:49,517 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 09:02:49,521 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:02:49,523 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:02:49,524 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:02:49,534 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:02:49,536 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "魔道祖师超话",
      "content" : "魔道祖师超话\r\n也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）\r\n转载老福特 ​​​​",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : "不是的",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : "是什么呢",
      "writeDate" : 1467331200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:02:50,871 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:02:50,873 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 09:02:50,876 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:02:50,878 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:02:50,880 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:02:50,882 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:02:50,884 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 27,
      "title" : "阿里巴巴最为窘迫的四件事",
      "content" : "我不告诉你",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 28,
      "title" : "高管却离开了",
      "content" : "去哪里了呢",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 30,
      "title" : "支付宝余额使用将受限",
      "content" : "反正都是用花呗",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 31,
      "title" : "国内垂直B2B电商平台TOP30",
      "content" : "你知道吗",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 33,
      "title" : "难道只有我一个人...",
      "content" : "是的，只有你一个人，必须只有你一个人",
      "writeDate" : 1467331200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:02:51,558 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:02:51,559 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 15(Integer), 5(Integer)
2019-07-27 09:02:51,562 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 09:02:51,564 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:02:51,566 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:02:51,570 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:02:51,574 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 4,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 34,
      "title" : "今天",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 35,
      "title" : "庆十一商品促销11111",
      "content" : "222222",
      "writeDate" : 1562198400000
    }, {
      "newsId" : 36,
      "title" : "测试",
      "content" : "测试",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:02:53,028 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:02:53,032 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:02:53,036 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:02:53,038 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:02:53,039 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:02:53,041 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:02:53,043 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:03:11,019 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:03:11,021 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:03:11,022 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:03:11,023 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:03:11,026 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 09:03:11,027 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:03:11,036 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:03:11,037 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:03:11,041 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:04:34,665 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users WHERE userName=? 
2019-07-27 09:04:34,668 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: admin(String)
2019-07-27 09:04:34,672 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:04:50,966 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:04:50,968 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:04:50,975 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:04:50,978 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:04:50,979 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:04:50,985 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:04:50,988 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:07:25,742 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:07:25,742 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:07:25,753 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:07:25,754 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:07:25,764 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:07:25,767 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 09:07:25,779 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:07:25,780 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:07:25,784 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:07:28,301 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 09:07:28,306 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 3(Integer)
2019-07-27 09:07:28,310 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:07:29,819 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:07:29,821 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:07:29,822 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:07:29,823 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:07:29,825 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 09:07:29,827 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:07:29,828 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:07:29,828 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:07:29,835 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:07:31,417 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:07:31,420 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:07:31,423 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:07:31,425 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:07:31,427 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:07:31,429 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:07:31,431 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:07:33,989 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:07:33,991 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:07:33,994 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:07:33,995 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:07:33,996 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:07:33,999 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:07:34,000 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:07:37,282 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:07:37,285 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:07:37,297 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:07:37,298 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:07:37,299 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:07:37,301 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:07:37,304 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:07:53,585 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:07:53,587 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:07:53,590 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:07:53,593 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:07:53,594 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:07:53,596 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:07:53,597 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:07:56,982 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:07:56,984 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:07:56,988 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:07:56,990 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:07:56,992 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:07:56,994 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:07:56,997 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:08:09,396 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:08:09,398 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:08:09,403 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:08:09,405 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:08:09,407 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:08:09,410 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:08:09,412 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:08:12,251 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:08:12,253 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:08:12,255 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:08:12,256 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:08:12,260 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 09:08:12,261 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:08:12,261 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:08:12,264 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:08:12,269 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:08:14,501 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:08:14,503 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:08:14,507 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:08:14,509 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:08:14,511 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:08:14,514 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:08:14,516 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:09:04,943 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-VFTL6TA with PID 12504 (C:\123\company1.3\company\target\classes started by 高羽翯 in C:\123\company1.3\company)
2019-07-27 09:09:04,958 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-27 09:09:04,958 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-27 09:09:13,710 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 10.594 seconds (JVM running for 13.911)
2019-07-27 09:09:27,243 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:09:27,327 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:09:27,319 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:09:27,332 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:09:27,310 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:09:27,335 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:09:27,402 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:09:27,418 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 09:09:27,418 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:09:29,717 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:09:29,722 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:09:29,727 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:09:29,730 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:09:29,731 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:09:29,734 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:09:29,745 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:09:34,703 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:09:34,705 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:09:34,715 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:09:34,717 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:09:34,718 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:09:34,721 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:09:34,726 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:09:37,770 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:09:37,772 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:09:37,778 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:09:37,781 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:09:37,782 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:09:37,786 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:09:37,788 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:09:52,369 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:09:52,371 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:09:52,377 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:09:52,379 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:09:52,380 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:09:52,384 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:09:52,387 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:10:18,681 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-VFTL6TA with PID 12504 (C:\123\company1.3\company\target\classes started by 高羽翯 in C:\123\company1.3\company)
2019-07-27 09:10:18,681 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-27 09:10:18,682 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-27 09:10:37,566 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 19.227 seconds (JVM running for 97.758)
2019-07-27 09:10:43,970 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:10:44,051 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:10:44,056 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:10:44,065 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:10:44,064 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 09:10:44,108 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:10:44,057 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:10:44,126 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:10:44,160 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:10:46,413 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:10:46,414 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:10:46,418 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:10:46,420 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:10:46,422 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:10:46,428 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:10:46,438 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:11:10,093 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:11:10,095 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:11:10,096 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:11:10,097 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:11:10,097 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:11:10,099 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:11:10,101 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 09:11:10,102 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:11:10,109 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:11:17,701 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:11:17,736 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:11:17,779 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:11:17,783 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:11:17,784 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:11:17,787 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:11:17,789 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:11:30,610 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:11:30,612 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:11:30,615 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:11:30,617 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:11:30,619 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:11:30,621 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:11:30,623 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:11:38,727 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:11:38,729 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 09:11:38,732 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:11:38,734 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:11:38,735 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:11:38,737 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:11:38,739 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 27,
      "title" : "阿里巴巴最为窘迫的四件事",
      "content" : "我不告诉你",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 28,
      "title" : "高管却离开了",
      "content" : "去哪里了呢",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 30,
      "title" : "支付宝余额使用将受限",
      "content" : "反正都是用花呗",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 31,
      "title" : "国内垂直B2B电商平台TOP30",
      "content" : "你知道吗",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 33,
      "title" : "难道只有我一个人...",
      "content" : "是的，只有你一个人，必须只有你一个人",
      "writeDate" : 1467331200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:11:39,485 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:11:39,486 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 09:11:39,490 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:11:39,491 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:11:39,492 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:11:39,494 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:11:39,496 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "魔道祖师超话",
      "content" : "魔道祖师超话\r\n也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）\r\n转载老福特 ​​​​",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : "不是的",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : "是什么呢",
      "writeDate" : 1467331200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:11:40,369 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:11:40,371 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:11:40,374 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:11:40,376 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:11:40,377 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:11:40,379 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:11:40,381 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:11:42,760 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:11:42,762 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 09:11:42,766 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:11:42,767 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:11:42,769 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:11:42,771 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:11:42,772 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 16,
      "title" : "海雕只爱满地跑还被猎物吓到",
      "content" : "韩动物园一海雕只爱满地跑还被猎物吓到！饲养员：你是猛禽不是狗…韩国一动物园将从小引进的海雕宝宝细心带大。结果正是因此才让明明能展翅翱翔的海雕只爱满地跑，不敢吃活物，喜欢被人撸……这可把饲养员急坏了！！",
      "writeDate" : 1532563200000
    }, {
      "newsId" : 23,
      "title" : "香港国际机场多人围攻老人",
      "content" : "【突发：香港国际机场多人围攻老人后为己方叫来救护车】7月26日晚间，仍在香港国际机场聚集的人群与一名路过的老人发生口角，随后老人遭到这群人的围堵，对老人全程高声喊叫、挤撞并用激光笔照射，期间有人把一个黄色标语贴在老人后背上，有人挤撞老人后故意躺在老人脚下，老人则一度被这些人挤撞到墙边。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 24,
      "title" : "魔道祖师超话",
      "content" : "魔道祖师超话\r\n也许真的有这么个小人只是我们看不到（新增的，没注意到没截完整[允悲][允悲]）\r\n转载老福特 ​​​​",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 25,
      "title" : "农村电商只能成为空谈?",
      "content" : "不是的",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 26,
      "title" : "上半年这些行业大爆炸",
      "content" : "是什么呢",
      "writeDate" : 1467331200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:11:43,482 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:11:43,484 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 09:11:43,487 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:11:43,488 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:11:43,489 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:11:43,492 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:11:43,494 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 27,
      "title" : "阿里巴巴最为窘迫的四件事",
      "content" : "我不告诉你",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 28,
      "title" : "高管却离开了",
      "content" : "去哪里了呢",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 30,
      "title" : "支付宝余额使用将受限",
      "content" : "反正都是用花呗",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 31,
      "title" : "国内垂直B2B电商平台TOP30",
      "content" : "你知道吗",
      "writeDate" : 1467331200000
    }, {
      "newsId" : 33,
      "title" : "难道只有我一个人...",
      "content" : "是的，只有你一个人，必须只有你一个人",
      "writeDate" : 1467331200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:11:44,021 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:11:44,022 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 15(Integer), 5(Integer)
2019-07-27 09:11:44,025 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 09:11:44,026 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:11:44,027 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:11:44,029 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:11:44,030 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 4,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 34,
      "title" : "今天",
      "content" : null,
      "writeDate" : 1467417600000
    }, {
      "newsId" : 35,
      "title" : "庆十一商品促销11111",
      "content" : "222222",
      "writeDate" : 1562198400000
    }, {
      "newsId" : 36,
      "title" : "测试",
      "content" : "测试",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:13:11,694 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:13:11,697 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:13:11,701 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:13:11,702 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 09:13:11,702 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:13:11,706 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:13:11,717 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:13:11,719 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:13:11,723 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:13:57,966 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 09:13:57,968 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 14(Integer)
2019-07-27 09:13:57,971 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:14:00,929 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:14:00,930 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:14:00,935 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 09:14:00,951 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:14:00,952 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:14:00,953 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:14:00,954 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:14:00,956 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:14:00,957 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:14:03,346 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 09:14:03,347 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 17(Integer)
2019-07-27 09:14:03,351 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:14:05,191 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:14:05,195 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:14:05,200 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 09:14:05,216 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:14:05,218 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:14:05,220 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:14:05,223 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:14:05,221 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:14:05,248 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:14:08,506 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:14:08,509 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:14:08,515 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:14:08,516 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:14:08,518 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:14:08,519 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:14:08,523 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:14:14,380 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:14:14,381 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:14:14,384 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:14:14,384 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:14:14,384 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:14:14,390 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:14:14,391 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:14:23,086 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:14:23,090 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:14:23,095 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:14:23,099 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:14:23,100 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:14:23,101 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:14:23,103 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:15:51,488 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:15:51,490 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:15:51,496 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 12
2019-07-27 09:15:51,506 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:15:51,508 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:15:51,512 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:15:51,514 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:15:51,516 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:15:51,520 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:18:28,246 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:18:28,249 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:18:28,262 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:18:28,264 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:18:28,266 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:18:28,268 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:18:28,278 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:18:31,605 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:18:31,607 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 09:18:31,610 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:18:31,612 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:18:31,612 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:18:31,616 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:18:31,617 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 22,
      "title" : "谷歌浏览器支持富文本，IE不支持！",
      "content" : "<p>\r\n\t<span style=\"font-size:16px;\">IE不支持富文本格式，谷歌浏览器支持富文本。</span></p>\r\n",
      "writer" : "erick",
      "writeDate" : 1467244800000,
      "count" : 4
    }, {
      "messageId" : 23,
      "title" : "清华同方显示器的报价，型号AW1920TS",
      "content" : "<p>\r\n\twww.baidu.com</p>\r\n<p>\r\n\t<img alt=\"devil\" height=\"20\" src=\"http://localhost:8080/company/ckeditor/plugins/smiley/images/devil_smile.gif\" title=\"devil\" width=\"20\" /></p>\r\n",
      "writer" : "bimy",
      "writeDate" : 1467244800000,
      "count" : 3
    }, {
      "messageId" : 24,
      "title" : "明天有雨吗？",
      "content" : "<p>\r\n\t天气预报说有雨，你们说会下吗</p>\r\n",
      "writer" : "郭燕",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 25,
      "title" : "苹果手机壳哪有卖的？",
      "content" : "",
      "writer" : "uidn",
      "writeDate" : 1467244800000,
      "count" : 0
    }, {
      "messageId" : 26,
      "title" : "今天下雪吗？",
      "content" : "<p>\r\n\t下雪？</p>\r\n",
      "writer" : "刘新乐",
      "writeDate" : 1467331200000,
      "count" : 3
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:18:31,838 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:18:31,839 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 09:18:31,843 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-27 09:18:31,844 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:18:31,845 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:18:31,847 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:18:31,849 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 27,
      "title" : "今天谁带U盘了？",
      "content" : "<p>\r\n\t借我用一下。谢谢！</p>\r\n",
      "writer" : "刘新乐",
      "writeDate" : 1467417600000,
      "count" : 1
    }, {
      "messageId" : 29,
      "title" : "庆十一商品促销",
      "content" : "买买买",
      "writer" : "大妈",
      "writeDate" : 1564012800000,
      "count" : 0
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:18:33,015 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:18:33,016 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:18:33,024 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:18:33,026 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:18:33,026 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:18:33,028 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:18:33,034 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:18:36,685 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-27 09:18:36,705 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 09:18:36,684 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId=? 
2019-07-27 09:18:36,719 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 09:18:36,711 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 09:18:36,734 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:18:36,735 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 18,
    "messageId" : 16,
    "content" : "今天没有雨，今天有冰雹。",
    "writer" : "user1",
    "writeDate" : 1467244800000
  }, {
    "revertId" : 40,
    "messageId" : 16,
    "content" : "11",
    "writer" : "11",
    "writeDate" : 1467331200000
  }, {
    "revertId" : 41,
    "messageId" : 16,
    "content" : "2222",
    "writer" : "aq",
    "writeDate" : 1562169600000
  } ]
}
2019-07-27 09:18:36,736 DEBUG (MessageController.java:62)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 16,
    "title" : "今天有雷阵雨吗？",
    "content" : "今天到底有没有雷阵雨？？？",
    "writer" : "guest",
    "writeDate" : 1467244800000,
    "count" : 2
  }
}
2019-07-27 09:18:48,036 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO revert VALUES(NULL,?,?,?,?) 
2019-07-27 09:18:48,041 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer), 1(String), 1(String), null
2019-07-27 09:18:48,237 ERROR (BaseController.java:271)- 操作数据库出现异常:名称重复，外键关联
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'writeDate' cannot be null
### The error may exist in com/zryx/company/mapper/RevertMapper.xml
### The error may involve com.zryx.company.mapper.RevertMapper.addRevert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO revert VALUES(NULL,?,?,?,?)
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'writeDate' cannot be null
; Column 'writeDate' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'writeDate' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy89.addRevert(Unknown Source)
	at com.zryx.company.service.impl.RevertServiceImpl.addRevert(RevertServiceImpl.java:27)
	at com.zryx.company.controller.RevertController.addNews(RevertController.java:29)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Column 'writeDate' cannot be null
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:18:49,477 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO revert VALUES(NULL,?,?,?,?) 
2019-07-27 09:18:49,479 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer), 1(String), 1(String), null
2019-07-27 09:18:49,483 ERROR (BaseController.java:271)- 操作数据库出现异常:名称重复，外键关联
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'writeDate' cannot be null
### The error may exist in com/zryx/company/mapper/RevertMapper.xml
### The error may involve com.zryx.company.mapper.RevertMapper.addRevert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO revert VALUES(NULL,?,?,?,?)
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'writeDate' cannot be null
; Column 'writeDate' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'writeDate' cannot be null
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:87)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy89.addRevert(Unknown Source)
	at com.zryx.company.service.impl.RevertServiceImpl.addRevert(RevertServiceImpl.java:27)
	at com.zryx.company.controller.RevertController.addNews(RevertController.java:29)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Column 'writeDate' cannot be null
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:18:55,465 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId=? 
2019-07-27 09:18:55,467 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 09:18:55,469 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:18:55,472 DEBUG (MessageController.java:62)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 16,
    "title" : "今天有雷阵雨吗？",
    "content" : "今天到底有没有雷阵雨？？？",
    "writer" : "guest",
    "writeDate" : 1467244800000,
    "count" : 2
  }
}
2019-07-27 09:18:55,478 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-27 09:18:55,479 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 09:18:55,485 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 09:18:55,487 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 18,
    "messageId" : 16,
    "content" : "今天没有雨，今天有冰雹。",
    "writer" : "user1",
    "writeDate" : 1467244800000
  }, {
    "revertId" : 40,
    "messageId" : 16,
    "content" : "11",
    "writer" : "11",
    "writeDate" : 1467331200000
  }, {
    "revertId" : 41,
    "messageId" : 16,
    "content" : "2222",
    "writer" : "aq",
    "writeDate" : 1562169600000
  } ]
}
2019-07-27 09:19:05,228 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:19:05,230 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:19:05,231 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:19:05,235 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:19:05,236 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:19:05,238 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:19:05,238 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:19:44,646 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO message VALUE(NULL,?,?,? ,?,?) 
2019-07-27 09:19:44,654 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 测试(String), 11(String), 11(String), 2019-07-27 00:00:00.0(Timestamp), 0(Integer)
2019-07-27 09:19:44,663 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 09:19:46,507 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:19:46,510 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:19:46,515 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:19:46,516 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:19:46,517 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:19:46,519 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:19:46,521 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:19:48,208 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:19:48,210 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 09:19:48,228 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 09:19:48,231 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:19:48,231 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:19:48,233 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:19:48,233 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 27,
      "title" : "今天谁带U盘了？",
      "content" : "<p>\r\n\t借我用一下。谢谢！</p>\r\n",
      "writer" : "刘新乐",
      "writeDate" : 1467417600000,
      "count" : 1
    }, {
      "messageId" : 29,
      "title" : "庆十一商品促销",
      "content" : "买买买",
      "writer" : "大妈",
      "writeDate" : 1564012800000,
      "count" : 0
    }, {
      "messageId" : 32,
      "title" : "测试",
      "content" : "11",
      "writer" : "11",
      "writeDate" : 1564099200000,
      "count" : 0
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:19:57,994 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:19:57,995 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:19:57,997 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:19:57,999 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:19:57,999 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:19:57,999 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:19:58,003 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:20:02,610 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId=? 
2019-07-27 09:20:02,612 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 09:20:02,613 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-27 09:20:02,613 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:20:02,614 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 09:20:02,616 DEBUG (MessageController.java:62)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 16,
    "title" : "今天有雷阵雨吗？",
    "content" : "今天到底有没有雷阵雨？？？",
    "writer" : "guest",
    "writeDate" : 1467244800000,
    "count" : 2
  }
}
2019-07-27 09:20:02,617 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 09:20:02,619 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 18,
    "messageId" : 16,
    "content" : "今天没有雨，今天有冰雹。",
    "writer" : "user1",
    "writeDate" : 1467244800000
  }, {
    "revertId" : 40,
    "messageId" : 16,
    "content" : "11",
    "writer" : "11",
    "writeDate" : 1467331200000
  }, {
    "revertId" : 41,
    "messageId" : 16,
    "content" : "2222",
    "writer" : "aq",
    "writeDate" : 1562169600000
  } ]
}
2019-07-27 09:20:04,289 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:20:04,299 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:20:04,302 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:20:04,307 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:20:04,307 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:20:04,311 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:20:04,312 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:20:09,388 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM message WHERE messageId = ? 
2019-07-27 09:20:09,390 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 18(Integer)
2019-07-27 09:20:09,403 ERROR (BaseController.java:271)- 操作数据库出现异常:名称重复，外键关联
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`company`.`revert`, CONSTRAINT `FK_tbl_revert` FOREIGN KEY (`messageID`) REFERENCES `message` (`messageID`))
### The error may exist in com/zryx/company/mapper/MessageMapper.xml
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: DELETE FROM message WHERE messageId = ?
### Cause: java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`company`.`revert`, CONSTRAINT `FK_tbl_revert` FOREIGN KEY (`messageID`) REFERENCES `message` (`messageID`))
; Cannot delete or update a parent row: a foreign key constraint fails (`company`.`revert`, CONSTRAINT `FK_tbl_revert` FOREIGN KEY (`messageID`) REFERENCES `message` (`messageID`)); nested exception is java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`company`.`revert`, CONSTRAINT `FK_tbl_revert` FOREIGN KEY (`messageID`) REFERENCES `message` (`messageID`))
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:246)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:72)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy88.delMessage(Unknown Source)
	at com.zryx.company.service.impl.MessageServiceImpl.delMessage(MessageServiceImpl.java:37)
	at com.zryx.company.controller.MessageController.delMessage(MessageController.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`company`.`revert`, CONSTRAINT `FK_tbl_revert` FOREIGN KEY (`messageID`) REFERENCES `message` (`messageID`))
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:212)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:20:12,738 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:20:12,739 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:20:12,742 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:20:12,743 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:20:12,743 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:20:12,746 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:20:12,748 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:20:17,759 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM message WHERE messageId = ? 
2019-07-27 09:20:17,761 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 18(Integer)
2019-07-27 09:20:17,768 ERROR (BaseController.java:271)- 操作数据库出现异常:名称重复，外键关联
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`company`.`revert`, CONSTRAINT `FK_tbl_revert` FOREIGN KEY (`messageID`) REFERENCES `message` (`messageID`))
### The error may exist in com/zryx/company/mapper/MessageMapper.xml
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: DELETE FROM message WHERE messageId = ?
### Cause: java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`company`.`revert`, CONSTRAINT `FK_tbl_revert` FOREIGN KEY (`messageID`) REFERENCES `message` (`messageID`))
; Cannot delete or update a parent row: a foreign key constraint fails (`company`.`revert`, CONSTRAINT `FK_tbl_revert` FOREIGN KEY (`messageID`) REFERENCES `message` (`messageID`)); nested exception is java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`company`.`revert`, CONSTRAINT `FK_tbl_revert` FOREIGN KEY (`messageID`) REFERENCES `message` (`messageID`))
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:246)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:72)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy88.delMessage(Unknown Source)
	at com.zryx.company.service.impl.MessageServiceImpl.delMessage(MessageServiceImpl.java:37)
	at com.zryx.company.controller.MessageController.delMessage(MessageController.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`company`.`revert`, CONSTRAINT `FK_tbl_revert` FOREIGN KEY (`messageID`) REFERENCES `message` (`messageID`))
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:212)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:20:20,066 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:20:20,067 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:20:20,071 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:20:20,072 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:20:20,072 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:20:20,077 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:20:20,078 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:20:22,018 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:20:22,019 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 09:20:22,019 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 09:20:22,023 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:20:22,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:20:22,028 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:20:22,029 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 27,
      "title" : "今天谁带U盘了？",
      "content" : "<p>\r\n\t借我用一下。谢谢！</p>\r\n",
      "writer" : "刘新乐",
      "writeDate" : 1467417600000,
      "count" : 1
    }, {
      "messageId" : 29,
      "title" : "庆十一商品促销",
      "content" : "买买买",
      "writer" : "大妈",
      "writeDate" : 1564012800000,
      "count" : 0
    }, {
      "messageId" : 32,
      "title" : "测试",
      "content" : "11",
      "writer" : "11",
      "writeDate" : 1564099200000,
      "count" : 0
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:20:25,237 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM message WHERE messageId = ? 
2019-07-27 09:20:25,239 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 32(Integer)
2019-07-27 09:20:25,255 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 09:20:25,270 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:20:25,271 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:20:25,273 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:20:25,275 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:20:25,278 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:20:25,280 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:20:25,282 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 16,
      "title" : "今天有雷阵雨吗？",
      "content" : "今天到底有没有雷阵雨？？？",
      "writer" : "guest",
      "writeDate" : 1467244800000,
      "count" : 2
    }, {
      "messageId" : 18,
      "title" : "今天装空调了！",
      "content" : "O(∩_∩)O哈哈~",
      "writer" : "quit",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 19,
      "title" : "众创梦工厂地址？",
      "content" : "求地址？",
      "writer" : "uret",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 20,
      "title" : "清华同方显示器价格？",
      "content" : "型号为：AW1920TS",
      "writer" : "robot",
      "writeDate" : 1467244800000,
      "count" : 1
    }, {
      "messageId" : 21,
      "title" : "你的开机速度是多少？",
      "content" : "晒晒你的电脑的开机速度吧~~~",
      "writer" : "honme",
      "writeDate" : 1467244800000,
      "count" : 4
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:20:26,761 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-27 09:20:26,763 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 09:20:26,764 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-27 09:20:26,766 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-27 09:20:26,766 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:20:26,768 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:20:26,769 DEBUG (MessageController.java:36)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "messageId" : 27,
      "title" : "今天谁带U盘了？",
      "content" : "<p>\r\n\t借我用一下。谢谢！</p>\r\n",
      "writer" : "刘新乐",
      "writeDate" : 1467417600000,
      "count" : 1
    }, {
      "messageId" : 29,
      "title" : "庆十一商品促销",
      "content" : "买买买",
      "writer" : "大妈",
      "writeDate" : 1564012800000,
      "count" : 0
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:22:21,081 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:22:21,086 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:22:21,089 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:22:21,090 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:22:21,091 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:22:21,093 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:22:21,095 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:22:53,150 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 09:22:53,151 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 18(Integer)
2019-07-27 09:22:53,154 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:23:07,112 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:23:07,112 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:23:07,116 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:23:07,118 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:23:07,119 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:23:07,120 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:23:07,122 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:23:09,140 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 09:23:09,143 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 18(Integer)
2019-07-27 09:23:09,146 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:23:13,492 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:23:13,493 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:23:13,496 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:23:13,497 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:23:13,499 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:23:13,499 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:23:13,499 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:23:16,499 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 09:23:16,501 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 18(Integer)
2019-07-27 09:23:16,503 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:24:41,014 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:24:41,016 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:24:41,026 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:24:44,192 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:24:44,194 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:24:44,198 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:24:46,670 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:24:46,672 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:24:46,676 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:24:53,641 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:24:53,643 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:24:53,645 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:24:54,879 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:24:54,881 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:24:54,884 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:24:55,127 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:24:55,129 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:24:55,131 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:24:55,335 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:24:55,336 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:24:55,340 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:24:56,455 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:24:56,457 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:24:56,459 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:24:56,782 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:24:56,783 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:24:56,787 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:24:57,399 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:24:57,399 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:24:57,402 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:24:58,482 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:24:58,483 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:24:58,484 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:25:28,416 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:25:28,417 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:25:28,421 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:25:29,130 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:25:29,131 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:25:29,133 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:25:36,469 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:25:36,471 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:25:36,474 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:25:39,112 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:25:39,113 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:25:39,117 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:25:49,776 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:25:49,778 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:25:49,780 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-27 09:25:51,987 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ? 
2019-07-27 09:25:51,989 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s345(String), 笔记本(String), IBM(String), 80(String), 8000(BigDecimal), d_r11_10_r1_c2.jpg(String), IBM5x系列(String), 18(Integer)
2019-07-27 09:25:51,993 ERROR (BaseController.java:285)- 系统异常:
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
### The error may exist in com/zryx/company/mapper/ProductsMapper.xml
### The error may involve com.zryx.company.mapper.ProductsMapper.updProducts-Inline
### The error occurred while setting parameters
### SQL: UPDATE product SET serialNumber=? ,name=? ,brand=? ,model=?,price=?,picture=?,description=? WHERE productId = ?
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy64.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy86.updProducts(Unknown Source)
	at com.zryx.company.service.impl.ProductServiceImpl.updProducts(ProductServiceImpl.java:51)
	at com.zryx.company.controller.ProductController.updProducts(ProductController.java:44)
	at sun.reflect.GeneratedMethodAccessor193.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'serialNumber' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.GeneratedMethodAccessor194.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 60 common frames omitted
2019-07-27 09:25:54,777 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:25:54,778 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:25:54,781 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:25:54,783 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:25:54,784 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:25:54,785 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:25:54,787 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:26:02,815 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:26:02,816 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 09:26:02,818 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-27 09:26:02,820 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:26:02,821 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:26:02,823 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:26:02,824 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 52,
      "serialNumber" : null,
      "name" : "超极本",
      "brand" : "315323135",
      "model" : "u89",
      "price" : 2000.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "性价比超级高的笔记本"
    }, {
      "productId" : 58,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "sony",
      "model" : "y88",
      "price" : 8888.0,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "超大内存，高清摄像头"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:26:11,160 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM product WHERE productId = ? 
2019-07-27 09:26:11,164 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 58(Integer)
2019-07-27 09:26:11,170 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 09:26:11,185 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:26:11,187 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:26:11,190 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:26:11,192 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:26:11,193 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:26:11,196 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:26:11,198 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 11
  }
}
2019-07-27 09:26:16,240 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:26:16,242 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 09:26:16,243 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:26:16,245 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:26:16,246 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:26:16,248 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:26:16,249 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 52,
      "serialNumber" : null,
      "name" : "超极本",
      "brand" : "315323135",
      "model" : "u89",
      "price" : 2000.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "性价比超级高的笔记本"
    } ],
    "pageCount" : 3,
    "dataCount" : 11
  }
}
2019-07-27 09:27:12,758 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO product VALUES(NULL,?,? ,?,?,?,?,?) 
2019-07-27 09:27:12,761 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: s788(String), 笔记本(String), fyy(String), gjhj(String), 8999.5(BigDecimal), hggh(String), ghgg(String)
2019-07-27 09:27:12,769 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 09:27:15,481 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:27:15,483 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:27:15,486 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:27:15,487 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:27:15,488 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:27:15,490 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:27:15,491 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 12
  }
}
2019-07-27 09:27:57,965 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO product VALUES(NULL,?,? ,?,?,?,?,?) 
2019-07-27 09:27:57,967 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: d000(String), ghgh(String), fggg(String), ghgh(String), 800(BigDecimal), hjjj(String), jjhj(String)
2019-07-27 09:27:57,974 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 09:28:04,921 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:28:04,923 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:28:04,925 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:28:04,929 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:28:04,929 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:28:04,929 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:28:04,933 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:28:08,362 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:28:08,364 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 09:28:08,366 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 09:28:08,367 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:28:08,368 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:28:08,370 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:28:08,371 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 52,
      "serialNumber" : null,
      "name" : "超极本",
      "brand" : "315323135",
      "model" : "u89",
      "price" : 2000.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "性价比超级高的笔记本"
    }, {
      "productId" : 59,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "fyy",
      "model" : "gjhj",
      "price" : 8999.5,
      "picture" : "hggh",
      "description" : "ghgg"
    }, {
      "productId" : 60,
      "serialNumber" : null,
      "name" : "ghgh",
      "brand" : "fggg",
      "model" : "ghgh",
      "price" : 800.0,
      "picture" : "hjjj",
      "description" : "jjhj"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:29:12,413 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users 
2019-07-27 09:29:12,414 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:29:12,418 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 14
2019-07-27 09:29:12,422 DEBUG (UserController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "userId" : 2,
    "userName" : "user2",
    "password" : "222222",
    "status" : 1
  }, {
    "userId" : 9,
    "userName" : "user9",
    "password" : "999999",
    "status" : 1
  }, {
    "userId" : 10,
    "userName" : "user1010",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 12,
    "userName" : "user11",
    "password" : "111111",
    "status" : 0
  }, {
    "userId" : 13,
    "userName" : "user123",
    "password" : "222222",
    "status" : 0
  }, {
    "userId" : 18,
    "userName" : "user167",
    "password" : "666666",
    "status" : 0
  }, {
    "userId" : 19,
    "userName" : "user19",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 20,
    "userName" : "user20",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 22,
    "userName" : "guoyan",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 23,
    "userName" : "liuxinle",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 24,
    "userName" : "maqiuyue",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 29,
    "userName" : "admin",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 37,
    "userName" : "张三",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 41,
    "userName" : "王五愣2",
    "password" : "123456",
    "status" : 0
  } ]
}
2019-07-27 09:30:23,411 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 09:30:23,412 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:30:23,414 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:30:23,415 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 09:30:23,416 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:30:23,419 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:30:23,420 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 09:30:27,356 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users 
2019-07-27 09:30:27,357 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:30:27,363 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 14
2019-07-27 09:30:27,366 DEBUG (UserController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "userId" : 2,
    "userName" : "user2",
    "password" : "222222",
    "status" : 1
  }, {
    "userId" : 9,
    "userName" : "user9",
    "password" : "999999",
    "status" : 1
  }, {
    "userId" : 10,
    "userName" : "user1010",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 12,
    "userName" : "user11",
    "password" : "111111",
    "status" : 0
  }, {
    "userId" : 13,
    "userName" : "user123",
    "password" : "222222",
    "status" : 0
  }, {
    "userId" : 18,
    "userName" : "user167",
    "password" : "666666",
    "status" : 0
  }, {
    "userId" : 19,
    "userName" : "user19",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 20,
    "userName" : "user20",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 22,
    "userName" : "guoyan",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 23,
    "userName" : "liuxinle",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 24,
    "userName" : "maqiuyue",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 29,
    "userName" : "admin",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 37,
    "userName" : "张三",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 41,
    "userName" : "王五愣2",
    "password" : "123456",
    "status" : 0
  } ]
}
2019-07-27 09:30:35,170 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM users WHERE userId =? 
2019-07-27 09:30:35,171 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 41(Integer)
2019-07-27 09:30:35,176 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-27 09:30:35,198 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users 
2019-07-27 09:30:35,199 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:30:35,202 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 09:30:35,204 DEBUG (UserController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "userId" : 2,
    "userName" : "user2",
    "password" : "222222",
    "status" : 1
  }, {
    "userId" : 9,
    "userName" : "user9",
    "password" : "999999",
    "status" : 1
  }, {
    "userId" : 10,
    "userName" : "user1010",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 12,
    "userName" : "user11",
    "password" : "111111",
    "status" : 0
  }, {
    "userId" : 13,
    "userName" : "user123",
    "password" : "222222",
    "status" : 0
  }, {
    "userId" : 18,
    "userName" : "user167",
    "password" : "666666",
    "status" : 0
  }, {
    "userId" : 19,
    "userName" : "user19",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 20,
    "userName" : "user20",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 22,
    "userName" : "guoyan",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 23,
    "userName" : "liuxinle",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 24,
    "userName" : "maqiuyue",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 29,
    "userName" : "admin",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 37,
    "userName" : "张三",
    "password" : "123456",
    "status" : 0
  } ]
}
2019-07-27 09:30:52,388 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users WHERE userId=? 
2019-07-27 09:30:52,390 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 37(Integer)
2019-07-27 09:30:52,393 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:31:12,992 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users 
2019-07-27 09:31:12,994 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:31:12,997 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 09:31:12,998 DEBUG (UserController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "userId" : 2,
    "userName" : "user2",
    "password" : "222222",
    "status" : 1
  }, {
    "userId" : 9,
    "userName" : "user9",
    "password" : "999999",
    "status" : 1
  }, {
    "userId" : 10,
    "userName" : "user1010",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 12,
    "userName" : "user11",
    "password" : "111111",
    "status" : 0
  }, {
    "userId" : 13,
    "userName" : "user123",
    "password" : "222222",
    "status" : 0
  }, {
    "userId" : 18,
    "userName" : "user167",
    "password" : "666666",
    "status" : 0
  }, {
    "userId" : 19,
    "userName" : "user19",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 20,
    "userName" : "user20",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 22,
    "userName" : "guoyan",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 23,
    "userName" : "liuxinle",
    "password" : "111111",
    "status" : 1
  }, {
    "userId" : 24,
    "userName" : "maqiuyue",
    "password" : "123456",
    "status" : 0
  }, {
    "userId" : 29,
    "userName" : "admin",
    "password" : "123456",
    "status" : 1
  }, {
    "userId" : 37,
    "userName" : "张三",
    "password" : "123456",
    "status" : 0
  } ]
}
2019-07-27 09:31:39,728 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:31:39,728 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:31:39,728 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:31:39,732 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:31:39,734 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:31:39,734 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:31:39,735 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 09:31:39,735 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:31:39,735 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:50:28,309 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 09:50:28,330 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 15(Integer)
2019-07-27 09:50:28,345 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:51:26,141 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-VFTL6TA with PID 6076 (C:\123\company1.3\company\target\classes started by 高羽翯 in C:\123\company1.3\company)
2019-07-27 09:51:26,325 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-27 09:51:26,325 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-27 09:51:38,980 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 14.846 seconds (JVM running for 17.917)
2019-07-27 09:51:42,058 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:51:42,116 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:51:42,106 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:51:42,164 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:51:42,164 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:51:42,164 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:51:42,258 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:51:42,261 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 09:51:42,261 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:51:45,904 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:51:45,907 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:51:45,913 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:51:45,919 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:51:45,921 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:51:45,924 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:51:45,938 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:51:48,673 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 09:51:48,673 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 14(Integer)
2019-07-27 09:51:48,679 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:51:58,688 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:51:58,689 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:51:58,689 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:51:58,695 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:51:58,696 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:51:58,706 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:51:58,708 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:54:12,325 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:54:12,326 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:54:12,334 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:54:12,335 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 09:54:12,335 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:54:12,343 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:54:12,351 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:54:12,352 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:54:12,356 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:54:18,166 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:54:18,168 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:54:18,172 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:54:18,173 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:54:18,174 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:54:18,176 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:54:18,178 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:54:29,684 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 09:54:29,685 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 09:54:29,691 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:55:35,463 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:55:35,464 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:55:35,465 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:55:35,466 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:55:35,471 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:55:35,471 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 09:55:35,485 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:55:35,487 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:55:35,490 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:55:38,882 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:55:38,884 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:55:38,888 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:55:38,890 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:55:38,891 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:55:38,893 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:55:38,896 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:55:41,239 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 09:55:41,241 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 14(Integer)
2019-07-27 09:55:41,244 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:55:59,901 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 09:55:59,903 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 15(Integer)
2019-07-27 09:55:59,907 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:57:17,636 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:57:17,638 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:57:17,639 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:57:17,641 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:57:17,643 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 09:57:17,645 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:57:17,649 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:57:17,650 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:57:17,653 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:57:45,403 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:57:45,405 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:57:45,407 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:57:45,407 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:57:45,410 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 09:57:45,412 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:57:45,428 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:57:45,429 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:57:45,434 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:57:50,320 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:57:50,322 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:57:50,324 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:57:50,325 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:57:50,327 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 09:57:50,329 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:57:50,341 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:57:50,343 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:57:50,347 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:57:53,745 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:57:53,747 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:57:53,754 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:57:53,756 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:57:53,757 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:57:53,760 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:57:53,762 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:57:56,066 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 09:57:56,068 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 14(Integer)
2019-07-27 09:57:56,070 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:58:12,715 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 09:58:12,718 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 09:58:12,721 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 09:58:12,723 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 09:58:12,724 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:58:12,726 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:58:12,728 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 09:58:15,703 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 09:58:15,704 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 14(Integer)
2019-07-27 09:58:15,707 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 09:58:40,624 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 09:58:40,626 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:58:40,632 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 09:58:40,641 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 09:58:40,643 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:58:40,646 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 09:58:40,647 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 09:58:40,649 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 09:58:40,650 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:01:35,623 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-VFTL6TA with PID 7116 (C:\123\company1.3\company\target\classes started by 高羽翯 in C:\123\company1.3\company)
2019-07-27 10:01:35,634 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-27 10:01:35,636 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-27 10:01:50,188 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 16.161 seconds (JVM running for 19.881)
2019-07-27 10:03:49,989 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 10:03:49,989 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 10:03:49,989 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 10:03:50,069 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:03:50,069 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:03:50,069 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:03:50,154 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:03:50,156 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:03:50,173 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 10:03:52,741 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 10:03:52,740 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 10:03:52,743 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:03:52,743 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:03:52,740 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 10:03:52,744 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:03:52,749 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:03:52,752 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:03:52,752 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 10:04:00,215 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:04:00,284 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:04:00,289 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:04:00,291 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:04:00,292 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:04:00,296 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:04:00,390 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:04:06,143 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 10:04:06,145 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 18(Integer)
2019-07-27 10:04:06,149 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:04:29,834 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 10:04:29,836 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 15(Integer)
2019-07-27 10:04:29,840 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:04:39,685 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 10:04:39,687 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 15(Integer)
2019-07-27 10:04:39,690 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:04:40,792 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 10:04:40,794 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:04:40,803 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 10:04:40,816 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 10:04:40,818 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:04:40,819 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 10:04:40,821 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:04:40,825 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:04:40,825 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:06:03,098 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:06:03,102 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:06:03,107 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:06:03,108 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:06:03,110 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:03,114 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:03,117 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:06:05,714 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 10:06:05,717 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:05,720 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 10:06:05,722 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:05,723 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 10:06:05,727 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:06:05,725 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 10:06:05,760 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:05,780 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:06:08,435 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:06:08,439 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:06:08,442 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:06:08,444 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:06:08,446 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:08,448 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:08,450 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:06:12,206 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 10:06:12,269 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 14(Integer)
2019-07-27 10:06:12,367 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:14,767 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:06:14,769 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:06:14,773 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:06:14,775 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:06:14,776 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:14,779 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:14,781 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:06:18,712 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 10:06:18,714 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 14(Integer)
2019-07-27 10:06:18,718 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:23,504 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:06:23,506 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:06:23,509 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:06:23,510 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:06:23,511 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:23,515 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:23,516 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:06:27,672 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 10:06:27,674 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 14(Integer)
2019-07-27 10:06:27,677 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:30,231 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 10:06:30,234 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:30,235 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 10:06:30,236 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:30,238 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 10:06:30,239 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 10:06:30,239 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:06:30,239 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:30,246 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:06:34,173 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 10:06:34,175 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 20(Integer)
2019-07-27 10:06:34,178 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:37,916 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:06:37,917 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:06:37,920 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:06:37,923 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:06:37,923 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:37,924 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:37,926 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:06:39,900 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 10:06:39,902 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:39,903 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 10:06:39,903 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:39,906 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 10:06:39,906 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:06:39,910 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 10:06:39,911 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:39,914 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:06:42,329 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:06:42,331 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:06:42,334 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:06:42,336 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:06:42,337 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:42,339 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:42,341 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:06:47,125 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 10:06:47,126 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:47,130 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 10:06:47,143 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 10:06:47,147 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:47,139 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 10:06:47,151 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:06:47,152 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:47,166 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:06:49,050 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:06:49,053 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:06:49,056 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:06:49,058 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:06:49,059 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:49,061 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:49,062 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:06:50,555 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 10:06:50,558 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 10:06:50,561 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:50,561 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:50,566 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:06:50,565 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:06:50,549 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 10:06:50,571 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:50,577 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 10:06:53,067 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:06:53,069 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:06:53,073 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:06:53,076 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:06:53,077 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:53,079 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:53,081 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:06:57,710 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 10:06:57,712 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 16(Integer)
2019-07-27 10:06:57,714 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:06:59,838 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 10:06:59,840 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:59,843 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 10:06:59,849 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 10:06:59,849 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 10:06:59,851 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:59,854 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:06:59,851 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:06:59,859 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:07:02,167 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 10:07:02,168 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 15(Integer)
2019-07-27 10:07:02,171 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:07:04,128 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:07:04,130 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:07:04,133 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:07:04,135 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:07:04,136 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:07:04,138 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:07:04,140 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:07:06,874 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:07:06,876 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer), 5(Integer)
2019-07-27 10:07:06,880 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:07:06,881 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:07:06,882 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:07:06,884 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:07:06,885 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 2,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 19,
      "serialNumber" : null,
      "name" : "智能手机",
      "brand" : "oppo",
      "model" : "r7",
      "price" : 2999.0,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "充电5分钟，通话两小时"
    }, {
      "productId" : 20,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "佳能",
      "model" : "5800",
      "price" : 14000.0,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "高清摄像头"
    }, {
      "productId" : 21,
      "serialNumber" : null,
      "name" : "美颜相机",
      "brand" : "卡西欧",
      "model" : "5800",
      "price" : 4000.0,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "堪称化妆术第一"
    }, {
      "productId" : 50,
      "serialNumber" : null,
      "name" : "寸vfds",
      "brand" : "寸vdfs",
      "model" : "从地方撒",
      "price" : 456.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "草甸子"
    }, {
      "productId" : 51,
      "serialNumber" : null,
      "name" : "三星手机",
      "brand" : "三星",
      "model" : "s6",
      "price" : 5200.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "三星新款曲屏智能手机"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:07:08,963 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:07:08,967 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer), 5(Integer)
2019-07-27 10:07:08,969 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-27 10:07:08,971 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:07:08,972 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:07:08,973 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:07:08,974 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 3,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 52,
      "serialNumber" : null,
      "name" : "超极本",
      "brand" : "315323135",
      "model" : "u89",
      "price" : 2000.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "性价比超级高的笔记本"
    }, {
      "productId" : 59,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "fyy",
      "model" : "gjhj",
      "price" : 8999.5,
      "picture" : "hggh",
      "description" : "ghgg"
    }, {
      "productId" : 60,
      "serialNumber" : null,
      "name" : "ghgh",
      "brand" : "fggg",
      "model" : "ghgh",
      "price" : 800.0,
      "picture" : "hjjj",
      "description" : "jjhj"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:07:15,828 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 10:07:15,827 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 10:07:15,840 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:07:15,840 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:07:15,843 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:07:15,844 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:07:15,826 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 10:07:15,852 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:07:15,855 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 10:07:21,494 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:07:21,495 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:07:21,498 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:07:21,500 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:07:21,501 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:07:21,503 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:07:21,504 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:08:31,798 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users WHERE userName=? 
2019-07-27 10:08:31,800 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: admin(String)
2019-07-27 10:08:31,804 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:08:40,087 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-27 10:08:40,089 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:08:40,091 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:08:40,092 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-27 10:08:40,093 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:08:40,096 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:08:40,097 DEBUG (NewsController.java:38)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚",
      "content" : "你以为看新闻联播仅仅是为了了解各类快讯消息？幼稚[喵喵]\r\n昨天的新闻联播告诉你，还可以学成语[允悲]没错，“令人喷饭”真的是成语[笑cry]【新闻联播在“饭点儿”讲的这件事，#荒唐得令人喷饭#】",
      "writeDate" : 1564012800000
    }, {
      "newsId" : 2,
      "title" : "哪吒之魔童降世4.5⭐",
      "content" : "之所以给这么高分，一个原因是超出我个人预期，看之前除了富贵告诉我电影的名字，啥预告片都没看，也来不及看，看完之后才被震撼住。\r\n第二个原因，是故事的改编，剥离了传统印象中，哪吒血腥的一面，但电影用“天命难违”的悲情很好的将哪吒重塑了一次。\r\n这也是我会写这么长影评的原因。\r\n我到不期待所谓的封神宇宙，我只希望这个系列能够把紧凑的故事讲完整，毕竟宇宙这个东西，对于现在仍然稚嫩的中国电影来说，还很难。",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 3,
      "title" : "我不应该受到这样的侮辱和诋毁",
      "content" : "【#孙杨回应颁奖风波#：我不应该受到这样的侮辱和诋毁】世锦赛男子4×200米自由泳决赛后孙杨接受采访，回应此前的颁奖风波：我想我能坚持到今天，也是因为我有一颗强大的内心。全世界有这么多游泳运动员，我想单凭这几个运动员他们想要影响我，这是很难的。",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 5,
      "title" : "一组真人版的迪士尼公主",
      "content" : "一组真人版的迪士尼公主\r\n这个还原度我吹爆，每一个都美的像仙女一样啊！！",
      "writeDate" : 1564099200000
    }, {
      "newsId" : 15,
      "title" : "#魔道祖师##陈情令# ​​​​",
      "content" : "魔道最乱关系:蓝湛喜欢魏婴，魏婴喜欢蓝忘机，蓝忘机喜欢魏无羡，魏无羡喜欢含光君，含光君喜欢夷陵老祖，夷陵老祖喜欢蓝湛[心][心][心]",
      "writeDate" : 1564099200000
    } ],
    "pageCount" : 4,
    "dataCount" : 18
  }
}
2019-07-27 10:08:43,679 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news WHERE newsId = ? 
2019-07-27 10:08:43,682 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 15(Integer)
2019-07-27 10:08:43,684 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:08:54,728 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:08:54,729 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:08:54,732 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:08:54,734 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:08:54,735 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:08:54,737 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:08:54,739 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:09:03,744 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 10:09:03,746 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 18(Integer)
2019-07-27 10:09:03,749 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:09:06,487 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:09:06,488 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:09:06,490 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:09:06,491 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:09:06,492 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:09:06,495 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:09:06,500 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:09:08,281 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 10:09:08,283 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 18(Integer)
2019-07-27 10:09:08,286 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:09:14,542 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:09:14,543 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:09:14,546 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:09:14,548 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:09:14,549 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:09:14,551 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:09:14,552 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:13:12,031 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product 
2019-07-27 10:13:12,033 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:13:12,036 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-27 10:13:12,037 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:13:12,038 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 13
2019-07-27 10:13:12,042 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:13:12,046 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product limit 0,8 
2019-07-27 10:13:12,047 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:13:12,050 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-27 10:13:16,829 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-27 10:13:16,831 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 5(Integer)
2019-07-27 10:13:16,834 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-27 10:13:16,836 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-27 10:13:16,837 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-27 10:13:16,839 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-27 10:13:16,840 DEBUG (ProductController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 5,
    "pageNum" : 1,
    "reasonable" : true,
    "toCamelVunderline" : false,
    "pageData" : [ {
      "productId" : 14,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 4600.0,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列IBM5x系列"
    }, {
      "productId" : 15,
      "serialNumber" : null,
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "像素超清"
    }, {
      "productId" : 16,
      "serialNumber" : null,
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 9000.0,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "爱国者08"
    }, {
      "productId" : 17,
      "serialNumber" : null,
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 2800.0,
      "picture" : "d_r11_10_r1_c221.jpg",
      "description" : "摩托罗拉经典款"
    }, {
      "productId" : 18,
      "serialNumber" : null,
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000.0,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 3,
    "dataCount" : 13
  }
}
2019-07-27 10:13:20,362 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId = ? 
2019-07-27 10:13:20,364 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 14(Integer)
2019-07-27 10:13:20,367 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
